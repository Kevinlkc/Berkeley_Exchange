"0","# A DIY function of Matching Estimator"
"0","# Some preparations: Distance Measure"
"0","Edistance <- function(X, Y)"
"0","{"
"0","  if (length(X) != length(Y)){print(""Error: Length Not Matched"")}"
"0","  else{return(sqrt(sum((X-Y)^2)))}"
"0","}"
"0","Mdistance <- function(X, Y, cov)"
"0","{"
"0","  if (length(X) != length(Y)){print(""Error: Length Not Matched"")}"
"0","  else{return(t(X - Y) %*% solve(cov) %*% (X-Y))}"
"0","}"
"0","kNN <- function(x0, x, y, numberOfMatch = 1, dis = ""Euclidean"", COV = 0)"
"0","{"
"0","  # x0 shall be a vector and x shall be a matrix, y shall be the corresponding vector of responding x"
"0","  # This function returns a numeric value if x0 is a number, and a vector if x0 is a vector"
"0","  if (dis == ""Euclidean"")"
"0","  {"
"0","    rankDis = c()"
"0","    for (i in 1:nrow(x))"
"0","    {"
"0","      rankDis = c(rankDis, Edistance(x0, x[i,]))"
"0","    }"
"0","    rankDis = rank(rankDis)"
"0","    Y_hat = mean(y[which(rankDis<=numberOfMatch)])"
"0","    X_hat = x[which(rankDis<=numberOfMatch),]"
"0","    return(list(""Y"" = Y_hat, ""X"" = X_hat))"
"0","  }"
"0","  else if (dis == ""M"")"
"0","  {"
"0","    if (COV == 0){print(""Error: covariance matrix not provided."")}"
"0","    else{"
"0","      rankDis = c()"
"0","      for (i in 1:nrow(x))"
"0","      {"
"0","        rankDis = c(rankDis, Mdistance(x0, x[i,], COV))"
"0","      }"
"0","      rankDis = rank(rankDis)"
"0","      Y_hat = mean(y[which(rankDis<=numberOfMatch)])"
"0","      X_hat = x[which(rankDis<=numberOfMatch),]"
"0","      return(list(""Y"" = Y_hat, ""X"" = X_hat))"
"0","    }"
"0","  }"
"0","}"
"0","MyMatching <- function(y, tr, x, numberOfMatch = 1, dis = ""Euclidean"", COV = 0)"
"0","{"
"0","  # First deal with the treatment group"
"0","  Y1_treat = y[tr == 1]"
"0","  Y0_treat = c()"
"0","  for (i in 1:length(y[tr == 1]))"
"0","  {"
"0","    Y0_treat = c(Y0_treat, kNN(x[i,], x[tr == 0,], y[tr == 0], numberOfMatch, dis, COV)$Y)"
"0","  }"
"0","  # Then deal with the control group"
"0","  Y0_control = y[tr == 0]"
"0","  Y1_control = c()"
"0","  for (i in 1:length(y[tr == 0]))"
"0","  {"
"0","    Y1_control = c(Y1_control, kNN(x[i,], x[tr == 1,], y[tr == 1], numberOfMatch, dis, COV)$Y)"
"0","  }"
"0","  # Calculate the test statistics (matching estimator and bias-corrected matching estimator)"
"0","  tau_m = mean(c(Y1_treat, Y1_control) - c(Y0_treat, Y0_control))"
"0","    # Fit two models for Y0 and Y1, respectively "
"0","  model0 <- lm(Y1_treat~x[tr == 1,])$coef"
"0","  model1 <- lm(Y0_control~x[tr == 0,])$coef"
"0","  bias = 0"
"0","  for (i in 1:length(y[tr == 1]))"
"0","  {"
"0","    predx = c(1, x[i,]) %*% model0"
"0","    print(kNN(x[i,], x[tr == 0,], y[tr == 0], numberOfMatch, dis)$X)"
"0","    prednn = cbind(1, kNN(x[i,], x[tr == 0,], y[tr == 0], numberOfMatch, dis)$X) %*% model0"
"0","    bias = bias + mean(predx - prednn)"
"0","  }"
"0","  for (i in 1:length(y[tr == 0]))"
"0","  {"
"0","    predx = c(1, x[i,]) %*% model1"
"0","    print(kNN(x[i,], x[tr == 1,], y[tr == 1], numberOfMatch, dis)$X)"
"0","    prednn = cbind(1, kNN(x[i,], x[tr == 1,], y[tr == 1], numberOfMatch, dis)$X) %*% model1"
"0","    bias = bias + mean(prednn - predx)"
"0","  }"
"0","  bias = bias / length(y)"
"0","  tau_mbc = tau_m - bias"
"0","  return(list(""tau_m"" = tau_m, ""tau_mbc"" = tau_mbc))"
"0","}"
