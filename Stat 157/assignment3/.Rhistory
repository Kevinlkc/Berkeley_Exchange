# If not, then re-code it to an index.
number = length(unique(pair))
tau = 0
temptau = rep(0, number)
wil = 0
sign = 0
# Calculate the three statistics as defined
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
tau = tau + (tempy[tempt == 1] - tempy[tempt == 0])/number
temptau[i] = tempy[tempt == 1] - tempy[tempt == 0]
sign = sign + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)
}
Wrank = rank(temptau)
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
wil = wil + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)*Wrank[i]
}
return(c(taus = tau, wilcoxon = wil, alignedRank = sign))
}
obsValue <- stat_Pair(data$pair, data$z, data$Y)
ext = rep(0,3)
for (i in 1:MC){
rvalue = stat_Pair(data$pair, permute(data$pair, data$z), data$Y)
for (j in 1:3){
if (abs(obsValue[j]) > abs(rvalue[j])){
ext[j] = ext[j]+1
}
}
}
ext/MC
# Data Input
data <- read.csv("Rubin_data(1983).csv")
dataxy = c(.046, 0, .091, .185, .036, .051, 0, .047,
.054, .094, .184, .034, .05, .108, .11, .095,
.114, 0, .056, .075, .098, .054, .030, .068,
.148, .162, .082, .075, .134, .39, .339, .458,
.152, .105, .083, .129, .145, .077, .579, .167,
.188, .214, .375, .545, .179, .165, .483, .444,
.193, .771, .328, .583, .189, .186, .168, .368,
.197, .350, .0, .383, .2, .071, .667, .429,
.213, .176, .164, .172, .209, .165, .092, .151,
.211, .667, .25, .617, .219, .25, .5, .35,
.219, .153, .185, .219, .224, .363, .372, .342,
.255, .226, .213, .327, .257, .098, .107, .095,
.261, .071, .0, .435, .263, .441, .448, .435,
.286, .161, .126, .181, .285, .389, .353, .309)
data <- data.frame(matrix(dataxy, ncol = 4))
data <- data %>%
rename(Y1 = X3, Y2 = X4) %>%
mutate(Y = Y1)
# FRT with raw data
data <- data %>%
mutate(index = 1:28) %>%
mutate(pair = (index+1) %/% 2) %>%
mutate(z = index %% 2) %>%
select(-index, -Y1, -Y2)
stat_Pair <- function(pair, treatment, y){
# Assume in our case that the stratum in arranged and indexed.
# If not, then re-code it to an index.
number = length(unique(pair))
tau = 0
temptau = rep(0, number)
wil = 0
sign = 0
# Calculate the three statistics as defined
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
tau = tau + (tempy[tempt == 1] - tempy[tempt == 0])/number
temptau[i] = tempy[tempt == 1] - tempy[tempt == 0]
sign = sign + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)
}
Wrank = rank(temptau)
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
wil = wil + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)*Wrank[i]
}
return(c(taus = tau, wilcoxon = wil, alignedRank = sign))
}
obsValue <- stat_Pair(data$pair, data$z, data$Y)
ext = rep(0,3)
for (i in 1:MC){
rvalue = stat_Pair(data$pair, permute(data$pair, data$z), data$Y)
for (j in 1:3){
if (abs(obsValue[j]) > abs(rvalue[j])){
ext[j] = ext[j]+1
}
}
}
ext/MC
# Data Input
data <- read.csv("Rubin_data(1983).csv")
dataxy = c(.046, 0, .091, .185, .036, .051, 0, .047,
.054, .094, .184, .034, .05, .108, .11, .095,
.114, 0, .056, .075, .098, .054, .030, .068,
.148, .162, .082, .075, .134, .39, .339, .458,
.152, .105, .083, .129, .145, .077, .579, .167,
.188, .214, .375, .545, .179, .165, .483, .444,
.193, .771, .328, .583, .189, .186, .168, .368,
.197, .350, .0, .383, .2, .071, .667, .429,
.213, .176, .164, .172, .209, .165, .092, .151,
.211, .667, .25, .617, .219, .25, .5, .35,
.219, .153, .185, .219, .224, .363, .372, .342,
.255, .226, .213, .327, .257, .098, .107, .095,
.261, .071, .0, .435, .263, .441, .448, .435,
.286, .161, .126, .181, .285, .389, .353, .309)
data <- data.frame(matrix(dataxy, ncol = 4))
data <- data %>%
rename(Y1 = X3, Y2 = X4) %>%
mutate(Y = Y2)
# FRT with raw data
data <- data %>%
mutate(index = 1:28) %>%
mutate(pair = (index+1) %/% 2) %>%
mutate(z = index %% 2) %>%
select(-index, -Y1, -Y2)
stat_Pair <- function(pair, treatment, y){
# Assume in our case that the stratum in arranged and indexed.
# If not, then re-code it to an index.
number = length(unique(pair))
tau = 0
temptau = rep(0, number)
wil = 0
sign = 0
# Calculate the three statistics as defined
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
tau = tau + (tempy[tempt == 1] - tempy[tempt == 0])/number
temptau[i] = tempy[tempt == 1] - tempy[tempt == 0]
sign = sign + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)
}
Wrank = rank(temptau)
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
wil = wil + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)*Wrank[i]
}
return(c(taus = tau, wilcoxon = wil, alignedRank = sign))
}
obsValue <- stat_Pair(data$pair, data$z, data$Y)
ext = rep(0,3)
for (i in 1:MC){
rvalue = stat_Pair(data$pair, permute(data$pair, data$z), data$Y)
for (j in 1:3){
if (abs(obsValue[j]) > abs(rvalue[j])){
ext[j] = ext[j]+1
}
}
}
ext/MC
ext = rep(0,3)
for (i in 1:MC){
rvalue = stat_Pair(data$pair, permute(data$pair, data$z), data$Y)
for (j in 1:3){
if (abs(obsValue[j]) > abs(rvalue[j])){
ext[j] = ext[j]+1
}
}
}
ext/MC
ext = rep(0,3)
for (i in 1:MC){
rvalue = stat_Pair(data$pair, permute(data$pair, data$z), data$Y)
for (j in 1:3){
if (abs(obsValue[j]) > abs(rvalue[j])){
ext[j] = ext[j]+1
}
}
}
ext/MC
# FRT with covariate-adjusted data
dataxy = c(.046, 0, .091, .185, .036, .051, 0, .047,
.054, .094, .184, .034, .05, .108, .11, .095,
.114, 0, .056, .075, .098, .054, .030, .068,
.148, .162, .082, .075, .134, .39, .339, .458,
.152, .105, .083, .129, .145, .077, .579, .167,
.188, .214, .375, .545, .179, .165, .483, .444,
.193, .771, .328, .583, .189, .186, .168, .368,
.197, .350, .0, .383, .2, .071, .667, .429,
.213, .176, .164, .172, .209, .165, .092, .151,
.211, .667, .25, .617, .219, .25, .5, .35,
.219, .153, .185, .219, .224, .363, .372, .342,
.255, .226, .213, .327, .257, .098, .107, .095,
.261, .071, .0, .435, .263, .441, .448, .435,
.286, .161, .126, .181, .285, .389, .353, .309)
data <- data.frame(matrix(dataxy, ncol = 4))
data <- data %>%
rename(Y1 = X3, Y2 = X4) %>%
mutate(Y = lm((Y1+Y2)~X1+X2)$residuals)
data
data <- data %>%
mutate(index = 1:28) %>%
mutate(pair = (index+1) %/% 2) %>%
mutate(z = index %% 2) %>%
select(-index, -Y1, -Y2)
stat_Pair <- function(pair, treatment, y){
# Assume in our case that the stratum in arranged and indexed.
# If not, then re-code it to an index.
number = length(unique(pair))
tau = 0
temptau = rep(0, number)
wil = 0
sign = 0
# Calculate the three statistics as defined
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
tau = tau + (tempy[tempt == 1] - tempy[tempt == 0])/number
temptau[i] = tempy[tempt == 1] - tempy[tempt == 0]
sign = sign + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)
}
Wrank = rank(temptau)
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
wil = wil + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)*Wrank[i]
}
return(c(taus = tau, wilcoxon = wil, alignedRank = sign))
}
obsValue <- stat_Pair(data$pair, data$z, data$Y)
ext = rep(0,3)
for (i in 1:MC){
rvalue = stat_Pair(data$pair, permute(data$pair, data$z), data$Y)
for (j in 1:3){
if (abs(obsValue[j]) > abs(rvalue[j])){
ext[j] = ext[j]+1
}
}
}
ext/MC
data <- data %>%
mutate(index = 1:28) %>%
mutate(pair = (index+1) %/% 2) %>%
mutate(z = (index+1) %% 2) %>%
select(-index, -Y1, -Y2)
# Data Input
data <- read.csv("Rubin_data(1983).csv")
dataxy = c(.046, 0, .091, .185, .036, .051, 0, .047,
.054, .094, .184, .034, .05, .108, .11, .095,
.114, 0, .056, .075, .098, .054, .030, .068,
.148, .162, .082, .075, .134, .39, .339, .458,
.152, .105, .083, .129, .145, .077, .579, .167,
.188, .214, .375, .545, .179, .165, .483, .444,
.193, .771, .328, .583, .189, .186, .168, .368,
.197, .350, .0, .383, .2, .071, .667, .429,
.213, .176, .164, .172, .209, .165, .092, .151,
.211, .667, .25, .617, .219, .25, .5, .35,
.219, .153, .185, .219, .224, .363, .372, .342,
.255, .226, .213, .327, .257, .098, .107, .095,
.261, .071, .0, .435, .263, .441, .448, .435,
.286, .161, .126, .181, .285, .389, .353, .309)
data <- data.frame(matrix(dataxy, ncol = 4))
data <- data %>%
rename(Y1 = X3, Y2 = X4) %>%
mutate(Y = Y1 + Y2)
# FRT with raw data
data <- data %>%
mutate(index = 1:28) %>%
mutate(pair = (index+1) %/% 2) %>%
mutate(z = (index+1) %% 2) %>%
select(-index, -Y1, -Y2)
stat_Pair <- function(pair, treatment, y){
# Assume in our case that the stratum in arranged and indexed.
# If not, then re-code it to an index.
number = length(unique(pair))
tau = 0
temptau = rep(0, number)
wil = 0
sign = 0
# Calculate the three statistics as defined
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
tau = tau + (tempy[tempt == 1] - tempy[tempt == 0])/number
temptau[i] = tempy[tempt == 1] - tempy[tempt == 0]
sign = sign + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)
}
Wrank = rank(temptau)
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
wil = wil + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)*Wrank[i]
}
return(c(taus = tau, wilcoxon = wil, alignedRank = sign))
}
obsValue <- stat_Pair(data$pair, data$z, data$Y)
ext = rep(0,3)
for (i in 1:MC){
rvalue = stat_Pair(data$pair, permute(data$pair, data$z), data$Y)
for (j in 1:3){
if (abs(obsValue[j]) > abs(rvalue[j])){
ext[j] = ext[j]+1
}
}
}
ext/MC
# FRT with covariate-adjusted data
dataxy = c(.046, 0, .091, .185, .036, .051, 0, .047,
.054, .094, .184, .034, .05, .108, .11, .095,
.114, 0, .056, .075, .098, .054, .030, .068,
.148, .162, .082, .075, .134, .39, .339, .458,
.152, .105, .083, .129, .145, .077, .579, .167,
.188, .214, .375, .545, .179, .165, .483, .444,
.193, .771, .328, .583, .189, .186, .168, .368,
.197, .350, .0, .383, .2, .071, .667, .429,
.213, .176, .164, .172, .209, .165, .092, .151,
.211, .667, .25, .617, .219, .25, .5, .35,
.219, .153, .185, .219, .224, .363, .372, .342,
.255, .226, .213, .327, .257, .098, .107, .095,
.261, .071, .0, .435, .263, .441, .448, .435,
.286, .161, .126, .181, .285, .389, .353, .309)
data <- data.frame(matrix(dataxy, ncol = 4))
data <- data %>%
rename(Y1 = X3, Y2 = X4) %>%
mutate(Y = lm((Y1+Y2)~X1+X2)$residuals)
data <- data %>%
mutate(index = 1:28) %>%
mutate(pair = (index+1) %/% 2) %>%
mutate(z = (index+1) %% 2) %>%
select(-index, -Y1, -Y2)
stat_Pair <- function(pair, treatment, y){
# Assume in our case that the stratum in arranged and indexed.
# If not, then re-code it to an index.
number = length(unique(pair))
tau = 0
temptau = rep(0, number)
wil = 0
sign = 0
# Calculate the three statistics as defined
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
tau = tau + (tempy[tempt == 1] - tempy[tempt == 0])/number
temptau[i] = tempy[tempt == 1] - tempy[tempt == 0]
sign = sign + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)
}
Wrank = rank(temptau)
for (i in 1:number){
tempy = y[pair == i]
tempt = treatment[pair == i]
wil = wil + ifelse(tempy[tempt == 1] > tempy[tempt == 0], 1, 0)*Wrank[i]
}
return(c(taus = tau, wilcoxon = wil, alignedRank = sign))
}
obsValue <- stat_Pair(data$pair, data$z, data$Y)
ext = rep(0,3)
for (i in 1:MC){
rvalue = stat_Pair(data$pair, permute(data$pair, data$z), data$Y)
for (j in 1:3){
if (abs(obsValue[j]) > abs(rvalue[j])){
ext[j] = ext[j]+1
}
}
}
ext/MC
# Neyman Inference with raw data
data %>%
filter(z == 1) %>% pull() %>%sum()
# Neyman Inference with raw data
data %>%
filter(z == 1) %>% pull(Y) %>%sum()
# Neyman Inference with raw data
(data %>% filter(z == 1) %>% pull(Y) %>% sum() - data %>%filter(z == 0) %>% pull(Y) %>% sum())/28
# Neyman Inference with raw data
(data %>% filter(z == 1) %>% pull(Y) %>% sum() - data %>%filter(z == 0) %>% pull(Y) %>% sum())/14
# Neyman Inference with raw data
print(paste("The point estimator for Tau_pair is ", (data %>% filter(z == 1) %>% pull(Y) %>% sum() - data %>%filter(z == 0) %>% pull(Y) %>% sum())/14, sep = ""))
# Neyman Inference with raw data
temptau = rep(0, number)
for (i in 1:number){
tempy = data$Y[pair == i]
tempt = data$z[pair == i]
temptau[i] = tempy[tempt == 1] - tempy[tempt == 0]
}
mean(temptau)
print(paste("The variance estimator for Tau_pair is ", sum((temptau - mean(temptau))^2),sep = ""))
print(paste("The variance estimator for Tau_pair is ", sum((temptau - mean(temptau))^2)/14/13,sep = ""))
print(paste("The point estimator for Tau_pair is ", mean(temptau), sep = ""))
print(paste("The Confidence Interval for Tau_pair is [", mean(temptau) - 1.96*sum((temptau - mean(temptau))^2)/14/13, ",", mean(temptau)+1.96*sum((temptau - mean(temptau))^2)/14/13,"]", sep = ""))
obsValue
data
for (i in 1:number){
tempX1 = data$X1[pair == i]
tempX2 = data$X2[pair == i]
tempt = data$z[pair == i]
tempx[i,1] = tempX1[tempt == 1] - tempX2[tempt == 0]
tempx[i,2] = tempX2[tempt == 1] - tempX2[tempt == 0]
}
# Neyman Inference with covariate-adjusted data
tempx = matrix(0, nrow = 14, ncol = 2)
for (i in 1:number){
tempX1 = data$X1[pair == i]
tempX2 = data$X2[pair == i]
tempt = data$z[pair == i]
tempx[i,1] = tempX1[tempt == 1] - tempX2[tempt == 0]
tempx[i,2] = tempX2[tempt == 1] - tempX2[tempt == 0]
}
temptau = lm(temptau~tempx)$coef[1]
print(paste("The Confidence Interval for Tau_pair is [", mean(temptau) - 1.96*sum((temptau - mean(temptau))^2)/14/13, ",", mean(temptau)+1.96*sum((temptau - mean(temptau))^2)/14/13,"]", sep = ""))
print(paste("The point estimator for Tau_pair is ", mean(temptau), sep = ""))
print(paste("The variance estimator for Tau_pair is ", sum((temptau - mean(temptau))^2)/14/13,sep = ""))
print(paste("The Confidence Interval for Tau_pair is [", mean(temptau) - 1.96*sum((temptau - mean(temptau))^2)/14/13, ",", mean(temptau)+1.96*sum((temptau - mean(temptau))^2)/14/13,"]", sep = ""))
temptau = lm(temptau~tempx)$coef[1]
temptau
# Neyman Inference with covariate-adjusted data
tempx = matrix(0, nrow = 14, ncol = 2)
for (i in 1:number){
tempX1 = data$X1[pair == i]
tempX2 = data$X2[pair == i]
tempt = data$z[pair == i]
tempx[i,1] = tempX1[tempt == 1] - tempX2[tempt == 0]
tempx[i,2] = tempX2[tempt == 1] - tempX2[tempt == 0]
}
temptau = lm(temptau~tempx)$residuals
# Neyman Inference with raw data
temptau = rep(0, number)
for (i in 1:number){
tempy = data$Y[pair == i]
tempt = data$z[pair == i]
temptau[i] = tempy[tempt == 1] - tempy[tempt == 0]
}
print(paste("The point estimator for Tau_pair is ", mean(temptau), sep = ""))
print(paste("The variance estimator for Tau_pair is ", sum((temptau - mean(temptau))^2)/14/13,sep = ""))
print(paste("The Confidence Interval for Tau_pair is [", mean(temptau) - 1.96*sum((temptau - mean(temptau))^2)/14/13, ",", mean(temptau)+1.96*sum((temptau - mean(temptau))^2)/14/13,"]", sep = ""))
# Neyman Inference with covariate-adjusted data
tempx = matrix(0, nrow = 14, ncol = 2)
for (i in 1:number){
tempX1 = data$X1[pair == i]
tempX2 = data$X2[pair == i]
tempt = data$z[pair == i]
tempx[i,1] = tempX1[tempt == 1] - tempX2[tempt == 0]
tempx[i,2] = tempX2[tempt == 1] - tempX2[tempt == 0]
}
temptau = lm(temptau~tempx)$residuals
print(paste("The point estimator for Tau_pair is ", mean(temptau), sep = ""))
print(paste("The variance estimator for Tau_pair is ", sum((temptau - mean(temptau))^2)/14/13,sep = ""))
print(paste("The Confidence Interval for Tau_pair is [", mean(temptau) - 1.96*sum((temptau - mean(temptau))^2)/14/13, ",", mean(temptau)+1.96*sum((temptau - mean(temptau))^2)/14/13,"]", sep = ""))
tau = lm(temptau~tempx)$coef[1]
print(paste("The point estimator for Tau_pair is ", tau, sep = ""))
# Neyman Inference with raw data
temptau = rep(0, number)
for (i in 1:number){
tempy = data$Y[pair == i]
tempt = data$z[pair == i]
temptau[i] = tempy[tempt == 1] - tempy[tempt == 0]
}
print(paste("The point estimator for Tau_pair is ", mean(temptau), sep = ""))
print(paste("The variance estimator for Tau_pair is ", sum((temptau - mean(temptau))^2)/14/13,sep = ""))
print(paste("The Confidence Interval for Tau_pair is [", mean(temptau) - 1.96*sum((temptau - mean(temptau))^2)/14/13, ",", mean(temptau)+1.96*sum((temptau - mean(temptau))^2)/14/13,"]", sep = ""))
# Neyman Inference with covariate-adjusted data
tempx = matrix(0, nrow = 14, ncol = 2)
for (i in 1:number){
tempX1 = data$X1[pair == i]
tempX2 = data$X2[pair == i]
tempt = data$z[pair == i]
tempx[i,1] = tempX1[tempt == 1] - tempX2[tempt == 0]
tempx[i,2] = tempX2[tempt == 1] - tempX2[tempt == 0]
}
tau = lm(temptau~tempx)$coef[1]
print(paste("The point estimator for Tau_pair is ", tau, sep = ""))
print(paste("The variance estimator for Tau_pair is ", lm,sep = ""))
lm(temptau~tempx)$sd('coef')
summary(lm(temptau~tempx))
temp<-summary(lm(temptau~tempx))
View(temp)
temp<-(lm(temptau~tempx))
View(temp)
temp<-(lm(temptau~tempx))
View(temp)
summary(temp)$std.err
summary(temp)$sigma
names(temp)
summary(temp)$coef[,2]
summary(temp)$coef
tau = lm(temptau~tempx)$coef[1]
v = summary(lm(temptau~tempx))$coef[1,2]
print(paste("The point estimator for Tau_pair is ", tau, sep = ""))
print(paste("The variance estimator for Tau_pair is ", v,sep = ""))
print(paste("The Confidence Interval for Tau_pair is [", mean(temptau) - 1.96*v, ",", mean(temptau)+1.96*v,"]", sep = ""))
data <- read.csv("Rubin_data(1983).csv")
data <- read.csv("Rubin_data(1983).csv")
View(data)
# Neymanian Inference
data %>%
group_by(subclass) %>%
summarise(tau = improved[data$treatment == 1] - improved[data$treatment == 0])
# Neymanian Inference
data %>%
group_by(subclass) %>%
tau = improved[data$treatment == 1] - improved[data$treatment == 0]
# Neymanian Inference
data %>%
group_by(subclass) %>%
mutate(tau = improved[data$treatment == 1] - improved[data$treatment == 0])
# Neymanian Inference
data$improved[data$treatment == 1] - data$improved[data$treatment == 0]
# Neymanian Inference
subtau <- data$improved[data$treatment == 1] - data$improved[data$treatment == 0]
subpi <- data %>% group_by(subclass) %>% summarise(n = sum(patients)) %>% pull(n) / sum(data$patients)
print(paste("The point estimator is ", sum(subtau*subpi), sep = ""))
subvar <- data$se[data$treatment == 1]^2/data$patients[data$treatment == 1] + data$se[data$treatment == 0]^2/data$patients[data$treatment == 0]
print(paste("The variance estimator is ", sum(subpi^2*subvar), sep = ""))
print(paste("The confidence interval is [", sum(subtau*subpi) - 1.96*sum(subpi^2*subvar), ",", sum(subtau*subpi) + 1.96*sum(subpi^2*subvar), "]", sep = ""))
extreme
# Tidy display of our result
display <- data.frame("Taus" = extreme[1]/MC, "V" = extreme[2]/MC, "Aligned Rank" = extreme[3]/MC)
display
