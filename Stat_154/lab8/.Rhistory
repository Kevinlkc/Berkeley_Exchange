cor()
PCA(Smarket[, -9], graph = T)
Smarket %>%
select(-Direction) %>%
cor()
?cor
# The previous day returns are not so correlated to today's returns (Corr(Today, lag)<0.05)
ggplot() +
geom_point(aes(x = Year, y = Volume), data = Smarket)
data("Smarket")
Smarket %>%
select(-Direction) %>%
cor()
PCA(Smarket[, -9], graph = T)
# The previous day returns are not so correlated to today's returns (Corr(Today, lag)<0.05)
ggplot() + theme_bw() +
geom_point(aes(x = Year, y = Volume), data = Smarket)
Smarket %>%
select(-Direction) %>%
cor()
model <- glm(Direction ~ .-Today, family = binomial, data = Smarket)
summary(model)
# Only the Year parameter seems significant (in terms of p-values)
# A unit's increase in yesterday's stock market price will lead to .08 percent decrease in logit of today's direction.
predict(model, type = "response")
View(model)
model <- glm(Direction ~ .-Today - Year, family = binomial, data = Smarket)
summary(model)
# Only the Year parameter seems significant (in terms of p-values)
# A unit's increase in yesterday's stock market price will lead to .08 percent decrease in logit of today's direction.
predict(model, type = "response")
# The previous day returns are not so correlated to today's returns (Corr(Today, lag)<0.05)
ggplot() + theme_bw() +
geom_point(aes(x = Year, y = Volume), data = Smarket) %>% head(6)
# Only the Year parameter seems significant (in terms of p-values)
# A unit's increase in yesterday's stock market price will lead to .08 percent decrease in logit of today's direction.
predict(model, type = "response") %>% head(10)
summary(model)
check_convergence <- function(x,y,error = 1e-4){
if (length(x)!=length(y)){
print("Error: Diff in length")
stop()
}
if (x - y < rep(error, length(x))){
return(T)
}
return(F)
}
check_convergence(c(1,2,3), c(1,2,4))
check_convergence(c(1,2,3), c(1,2,4))
check_convergence <- function(x,y,error = 1e-4){
if (length(x)!=length(y)){
print("Error: Diff in length")
stop()
}
flag = T
for (i in 1:length(x)){
if (x[i] - y[i] > error){flag = F}
}
return(flag)
}
check_convergence(c(1,2,3), c(1,2,4))
check_convergence(c(1,2,3), c(1,2,4))
check_convergence(c(1,2,3), c(2,2,4))
check_convergence <- function(x,y,error = 1e-4){
if (length(x)!=length(y)){
print("Error: Diff in length")
stop()
}
flag = T
for (i in 1:length(x)){
if (x[i] - y[i] > error){flag = FALSE}
}
return(flag)
}
check_convergence(c(1,2,3), c(2,2,4))
check_convergence <- function(x,y,error = 0.01){
if (length(x)!=length(y)){
print("Error: Diff in length")
stop()
}
flag = T
for (i in 1:length(x)){
if (x[i] - y[i] > error){flag = FALSE}
}
return(flag)
}
check_convergence(c(1,2,3), c(2,2,4))
check_convergence <- function(x,y,error = 0.01){
if (length(x)!=length(y)){
print("Error: Diff in length")
stop()
}
for (i in 1:length(x)){
if (x[i] - y[i] > error){return(F)}
}
return(T)
}
check_convergence(c(1,2,3), c(2,2,4))
check_convergence <- function(x,y,error = 0.01){
if (length(x)!=length(y)){
print("Error: Diff in length")
stop()
}
for (i in 1:length(x)){
if (abs(x[i] - y[i]) > error){return(F)}
}
return(T)
}
check_convergence(c(1,2,3), c(2,2,4))
x = as.matrix(Smarket %>% select(-Year, -Direction, -Today))
y = as.matrix(Smarket %>% select(Direction) %>% mutate(Direction = ifelse(Direction == "Up", 1, 0)))
check_convergence <- function(x,y,error = 0.01){
if (length(x)!=length(y)){
print("Error: Diff in length")
stop()
}
for (i in 1:length(x)){
if (abs(x[i] - y[i]) > error){return(F)}
}
return(T)
}
b = rep(0, 7)
bnew = rep(1, 7)
x = as.matrix(Smarket %>% select(-Year, -Direction, -Today))
y = as.matrix(Smarket %>% select(Direction) %>% mutate(Direction = ifelse(Direction == "Up", 1, 0)))
p = rep(0, nrow(x))
W = diag(1, nrow = nrow(x))
while (check_convergence(b, bnew) == F){
for (i in 1:nrow(x)){
p[i] = e^(t(x[i]) %*% b) / (1 + e^(t(x[i]) %*% b))
}
for (i in 1:nrow(x)){
W[i,i] = p[i](1 - p[i])
}
z = x %*% b + solve(W) %*% (y-p)
bnew = solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
}
while (check_convergence(b, bnew) == F){
for (i in 1:nrow(x)){
p[i] = exp(t(x[i]) %*% b) / (1 + exp(t(x[i]) %*% b))
}
for (i in 1:nrow(x)){
W[i,i] = p[i](1 - p[i])
}
z = x %*% b + solve(W) %*% (y-p)
bnew = solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
}
i = 1
exp(t(x[i]) %*% b) / (1 + exp(t(x[i]) %*% b))
while (check_convergence(b, bnew) == F){
for (i in 1:nrow(x)){
p[i] = exp(t(x[i,]) %*% b) / (1 + exp(t(x[i,]) %*% b))
}
for (i in 1:nrow(x)){
W[i,i] = p[i](1 - p[i])
}
z = x %*% b + solve(W) %*% (y-p)
bnew = solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
}
while (check_convergence(b, bnew) == F){
for (i in 1:nrow(x)){
p[i] = exp((x[i,]) %*% b) / (1 + exp((x[i,]) %*% b))
}
for (i in 1:nrow(x)){
W[i,i] = p[i](1 - p[i])
}
z = x %*% b + solve(W) %*% (y-p)
bnew = solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
}
exp((x[i,]) %*% b) / (1 + exp((x[i,]) %*% b))
x[1,]
b
while (check_convergence(b, bnew) == F){
for (i in 1:nrow(x)){
p[i] = exp((x[i,]) %*% t(b)) / (1 + exp((x[i,]) %*% t(b)))
}
for (i in 1:nrow(x)){
W[i,i] = p[i](1 - p[i])
}
z = x %*% b + solve(W) %*% (y-p)
bnew = solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
}
data("Smarket")
Smarket %>%
select(-Direction) %>%
cor()
PCA(Smarket[, -9], graph = T)
# The previous day returns are not so correlated to today's returns (Corr(Today, lag)<0.05)
ggplot() + theme_bw() +
geom_point(aes(x = Year, y = Volume), data = Smarket)
exp((x[i,]) %*% t(b)) / (1 + exp((x[i,]) %*% t(b)))
while (check_convergence(b, bnew) == F){
for (i in 1:nrow(x)){
p[i] = exp(t(x[i,]) %*% (b)) / (1 + exp(t(x[i,]) %*% (b)))
}
for (i in 1:nrow(x)){
W[i,i] = p[i](1 - p[i])
}
z = x %*% b + solve(W) %*% (y-p)
bnew = solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
}
y = (Smarket %>% select(Direction) %>% mutate(Direction = ifelse(Direction == "Up", 1, 0)))
while (check_convergence(b, bnew) == F){
for (i in 1:nrow(x)){
p[i] = exp((x[i,]) %*% (b)) / (1 + exp((x[i,]) %*% (b)))
}
for (i in 1:nrow(x)){
W[i,i] = p[i](1 - p[i])
}
z = x %*% b + solve(W) %*% (y-p)
bnew = solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
}
exp(x[i,] %*% t(b)) / (1 + exp((x[i,]) %*% t(b)))
t(x[i,])
b
t(x[i,]) %*% b
t(x[i,]) %*% t(b)
t(x[i,]) %*% t(t(b))
b
t(b)
t(t(b))
x[i,] %*% t(t(b))
t(x[i,]) %*%
x[1,]
t(x[i,]) %*%
x[1,]
x = as.matrix(Smarket %>% select(-Year, -Direction, -Today))
t(x[i,]) %*%
x[1,]
x
t(x[i,]) %*%
x[1,]
t(x[i,]) %*%
x[i,]
X = as.matrix(Smarket %>% select(-Year, -Direction, -Today))
t(X[i,])
while (check_convergence(b, bnew) == F){
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
for (i in 1:nrow(X)){
W[i,i] = p[i](1 - p[i])
}
z = X %*% b + solve(W) %*% (y-p)
bnew = solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% z
}
t(X[i,])
t(X[i,]) %*% b
b
t(x[i,]) %*% t(t(b))
t(X[i,])
b
t(t(b))
t(x[i,]) %*% t(t(b))
X = rbind(1,as.matrix(Smarket %>% select(-Year, -Direction, -Today)))
View(X)
X = bind(1,as.matrix(Smarket %>% select(-Year, -Direction, -Today)))
?rbind
X = cbind(1,as.matrix(Smarket %>% select(-Year, -Direction, -Today)), )
X = cbind(1,as.matrix(Smarket %>% select(-Year, -Direction, -Today)))
check_convergence <- function(x,y,error = 0.01){
if (length(x)!=length(y)){
print("Error: Diff in length")
stop()
}
for (i in 1:length(x)){
if (abs(x[i] - y[i]) > error){return(F)}
}
return(T)
}
b = rep(0, 7)
bnew = rep(1, 7)
X = cbind(1,as.matrix(Smarket %>% select(-Year, -Direction, -Today)))
y = as.matrix(Smarket %>% select(Direction) %>% mutate(Direction = ifelse(Direction == "Up", 1, 0)))
p = rep(0, nrow(x))
W = diag(1, nrow = nrow(x))
while (check_convergence(b, bnew) == F){
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
for (i in 1:nrow(X)){
W[i,i] = p[i](1 - p[i])
}
z = X %*% b + solve(W) %*% (y-p)
bnew = solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% z
}
while (check_convergence(b, bnew) == F){
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
for (i in 1:nrow(X)){
W[i,i] = p[i] * (1 - p[i])
}
z = X %*% b + solve(W) %*% (y-p)
bnew = solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% z
}
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
for (i in 1:nrow(X)){
W[i,i] = p[i] * (1 - p[i])
}
z = X %*% b + solve(W) %*% (y-p)
bnew = solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% z
while (check_convergence(b, bnew) == F){
b = bnew
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
for (i in 1:nrow(X)){
W[i,i] = p[i] * (1 - p[i])
}
z = X %*% b + solve(W) %*% (y-p)
bnew = solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% z
}
b
check_convergence <- function(x,y,error = 1e-4){
if (length(x)!=length(y)){
print("Error: Diff in length")
stop()
}
for (i in 1:length(x)){
if (abs(x[i] - y[i]) > error){return(F)}
}
return(T)
}
while (check_convergence(b, bnew) == F){
b = bnew
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
for (i in 1:nrow(X)){
W[i,i] = p[i] * (1 - p[i])
}
z = X %*% b + solve(W) %*% (y-p)
bnew = solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% z
}
b
# Compare our results with those returned by the glm function:
round(bnew - model$coefficients)
while (check_convergence(b, bnew) == F){
b = bnew
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
Xt = X
for (i in 1:nrow(X)){
for (j in 1:ncol(X)){
Xt[i,j] = X[i,j] * p[i] * (1 - p[i])
}
}
bnew = b + solve(t(X) %*% Xt) %*% Xt %*% (y-p)
}
bnew
# Compare our results with those returned by the glm function:
round(bnew - model$coefficients)
while (check_convergence(b, bnew) == F){
b = bnew
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
for (i in 1:nrow(X)){
W[i,i] = p[i] * (1 - p[i])
}
z = X %*% b + solve(W) %*% (y-p)
bnew = solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% z
}
# Compare our results with those returned by the glm function:
round(bnew - model$coefficients)
while (check_convergence(b, bnew) == F){
b = bnew
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
Xt = X
for (i in 1:nrow(X)){
for (j in 1:ncol(X)){
Xt[i,j] = X[i,j] * p[i] * (1 - p[i])
}
}
bnew = b + solve(t(X) %*% Xt) %*% Xt %*% (y-p)
}
bnew
# Compare our results with those returned by the glm function:
round(bnew - model$coefficients)
check_convergence <- function(x,y,error = 1e-4){
if (length(x)!=length(y)){
print("Error: Diff in length")
stop()
}
for (i in 1:length(x)){
if (abs(x[i] - y[i]) > error){return(F)}
}
return(T)
}
b = rep(0, 7)
bnew = rep(1, 7)
X = cbind(1,as.matrix(Smarket %>% select(-Year, -Direction, -Today)))
y = as.matrix(Smarket %>% select(Direction) %>% mutate(Direction = ifelse(Direction == "Up", 1, 0)))
p = rep(0, nrow(X))
W = diag(1, nrow = nrow(X))
while (check_convergence(b, bnew) == F){
b = bnew
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
for (i in 1:nrow(X)){
W[i,i] = p[i] * (1 - p[i])
}
z = X %*% b + solve(W) %*% (y-p)
bnew = solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% z
}
while (check_convergence(b, bnew) == F){
b = bnew
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
Xt = X
for (i in 1:nrow(X)){
for (j in 1:ncol(X)){
Xt[i,j] = X[i,j] * p[i] * (1 - p[i])
}
}
bnew = b + solve(t(X) %*% Xt) %*% Xt %*% (y-p)
}
bnew
# Compare our results with those returned by the glm function:
round(bnew - model$coefficients)
while (check_convergence(b, bnew) == F){
b = bnew
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
Xt = X
for (i in 1:nrow(X)){
for (j in 1:ncol(X)){
Xt[i,j] = X[i,j] * p[i] * (1 - p[i])
}
}
bnew = b + solve(t(X) %*% Xt) %*% Xt %*% (y-p)
}
bnew
# Compare our results with those returned by the glm function:
bnew - model$coefficients
X
y
b = rep(0, 7)
bnew = rep(1, 7)
X = cbind(1,as.matrix(Smarket %>% select(-Year, -Direction, -Today)))
y = as.matrix(Smarket %>% select(Direction) %>% mutate(Direction = ifelse(Direction == "Up", 1, 0)))
p = rep(0, nrow(X))
W = diag(1, nrow = nrow(X))
while (check_convergence(b, bnew) == F){
b = bnew
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
for (i in 1:nrow(X)){
W[i,i] = p[i] * (1 - p[i])
}
z = X %*% b + solve(W) %*% (y-p)
bnew = solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% z
}
# Compare our results with those returned by the glm function:
round(bnew - model$coefficients)
glm(y~X, family = binomial)
b = rep(0, 7)
bnew = rep(0.1, 7)
X = cbind(1,as.matrix(Smarket %>% select(-Year, -Direction, -Today)))
y = as.matrix(Smarket %>% select(Direction) %>% mutate(Direction = ifelse(Direction == "Up", 1, 0)))
p = rep(0, nrow(X))
W = diag(1, nrow = nrow(X))
glm(y~X, family = binomial)
while (check_convergence(b, bnew) == F){
b = bnew
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
for (i in 1:nrow(X)){
W[i,i] = p[i] * (1 - p[i])
}
z = X %*% b + solve(W) %*% (y-p)
bnew = solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% z
}
# Compare our results with those returned by the glm function:
round(bnew - model$coefficients)
while (check_convergence(b, bnew) == F){
b = bnew
for (i in 1:nrow(X)){
p[i] = exp((X[i,]) %*% (b)) / (1 + exp((X[i,]) %*% (b)))
}
Xt = X
for (i in 1:nrow(X)){
for (j in 1:ncol(X)){
Xt[i,j] = X[i,j] * p[i] * (1 - p[i])
}
}
bnew = b + solve(t(X) %*% Xt) %*% Xt %*% (y-p)
}
bnew
# Compare our results with those returned by the glm function:
bnew - model$coefficients
?round
# Compare our results with those returned by the glm function:
round(bnew - model$coefficients, digits = 4)
# Compare our results with those returned by the glm function:
round(bnew - model$coefficients, digits = 10)
# Compare our results with those returned by the glm function:
round(bnew - model$coefficients, digits = 8)
# Compare our results with those returned by the glm function:
round(bnew - model$coefficients, digits = 8)
