"0","d <- function(x,z,p=2){"
"0","  return((abs(x-z)^p)^(1/p))"
"0","}"
"0","kNNW <- function(x,y,z,k,p){"
"0","  result = c()"
"0","  for (query in 1:length(z))"
"0","  {"
"0","    # First, find the nearest k points"
"0","    indices <- which(rank(d(x,z[query],p))<=k)"
"0","    # Access the value and feature of those k points"
"0","    label <- y[indices]"
"0","    feature <- x[indices]"
"0","    pred = 0"
"0","    denominator = 0"
"0","    # Calculate the weights"
"0","    for (i in 1:length(label)){"
"0","      denominator = denominator + exp(-d(feature[i], z[query], p))"
"0","    }"
"0","    for (i in 1:length(label)){"
"0","      pred = pred + label[i]*exp(-d(feature[i], z[query], p)) / denominator"
"0","    }"
"0","    result = c(result, pred)"
"0","  }"
"0","  return(result)"
"0","}"
"0","# Note that in the simple scenario, L1 norm = L2 norm"
"0","set.seed(12345)"
"0","x <- runif(-2, 2, n = 100) "
"0","f <- function(u){"
"0","  return(sin(pi*u) + u^2)"
"0","}"
"0","y <- f(x) + rnorm(length(x), sd = 0.2)"
"0","# # one query point, k = 10 neighbors, manhattan distance"
"0","# yhat = kNNW(x, y, z = 0, k = 10, p = 1)"
"0","# # one query point, k = 50 neighbors, manhattan distance"
"0","# yhat = kNNW(x, y, z = 0, k = 50, p = 1)"
"0","# # various query points, k = 50 neighbors, manhattan distance"
"0","# yhat = kNNW(x, y, z = c(-0.5, 0, 0.5), k = 50, p = 1)"
"0","# Generate some test data"
"0","z = seq(-2, 2, 0.01)"
"0","yhat = kNNW(x, y, z = z, k = 1, p = 1)"
"0","yreal <- f(z) + rnorm(length(z), sd = 0.2)"
"0","ggplot() + theme_bw() +"
"0","  geom_point(aes(x = z, y = yhat), color = ""maroon"")"
