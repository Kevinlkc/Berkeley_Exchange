temp <- eff %*%t(matrix_data)
View(temp)
temp <- matrix_data %*% t(eff)
matrix_data <- iris %>%
select(1:4) %>%
pull() %>%
matrix(ncol = 4)
eff <- 1:4
temp <- matrix_data %*% t(eff)
temp <- eff %*% t(matrix_data)
View(temp)
vnorm <- function(a){
return(sqrt(t(a) %*% a))
}
v <- 1:5
vnorm(v)
v <- 3:4
vnorm(v)
# testing it with 1:5
v <- 1:5
vnorm(v)
u <- v/vnorm(v)
vnorm(v)
u <- v/vnorm(v)
u <- v/vnorm(c(v))
u <- v/c(vnorm(v))
nrow(A)
ncol(A)
is_square <- function(A){
if (nrow(A) == ncol(A)){
return(TRUE)
}else{
return(FALSE)
}
}
temp <- matrix(1:25, nrow = 5)
is_square(temp)
temp <- matrix(1:25, nrow = 25)
is_square(temp)
mtrace <- function(A){
if (is_square(A) == FALSE){
return("Not a square matrix")
}else{
tr = 0
for (i in 1:ncol(A)) {
tr = tr + A[i,i]
}
return(tr)
}
}
mtrace(diag(ncol = 5))
mtrace(diag(nrow = 5))
mtrace(matrix(1:24, nrow = 6))
mtrace(A+B)-mtrace(A)-mtrace(B)
mtrace(A %+% B)-mtrace(A)-mtrace(B)
A <- matrix(1:25, nrow = 5)
B <- diag(nrow = 5)
mtrace(A %+% B)-mtrace(A)-mtrace(B)
A+B
mtrace(A + B)-mtrace(A)-mtrace(B)
mtrace(c*A)-c*mtrace(A)
mtrace(c %*% A)-c*mtrace(A)
mtrace(5*A)-c*mtrace(A)
mtrace(5.A)-c*mtrace(A)
5`A
5.A
stop
break
return
return()
exit
mtrace(A+B)-mtrace(A)-mtrace(B)
exit()
``
5*A
mtrace(C*A)-C*mtrace(A)
C*A
mtrace(5*A)-C*mtrace(A)
5*A
mtrace(5*A)
mtrace(5*A)-5*mtrace(A)
C <- 5
mtrace(C*A)-C*mtrace(A)
mtrace(c*A)-c*mtrace(A)
# You can arbitrarily pick the values of A,B and C, the following expressions should equal 0
verification <- function(A,B,C){
if(mtrace(A+B)-mtrace(A)-mtrace(B) == 0 &
mtrace(C*A)-C*mtrace(A) == 0 &
mtrace(t(A)*B) == mtrace(A*t(B)) &
mtrace(B*t(A)) == mtrace(A*t(B)) &
mtrace(t(B)*A) == mtrace(A*t(B))){
return(TRUE)
}else{
return(FALSE)
}
}
verification(A,B,C)
mtcars
as.matrix(mtcars)
temp <- as.matrix(mtcars)
View(temp)
typeof(temp)
mtcars %>%
select(c("mpg", "disp", "hp", "drat", "wt")) %>%
as.matrix()
M <- mtcars %>%
select(c("mpg", "disp", "hp", "drat", "wt")) %>%
as.matrix()
?apply()
apply(M,mean)
apply(M,mean())
apply(M,2,mean())
apply(M,2,mean)
ï¼Ÿscale()
?scale()
Mc <- scale(M)
View(Mc)
View(M)
apply(Mc, 2, mean)
Mc <- scale(M, scale = FALSE)
apply(Mc, 2, mean)
?sweep
sweep(M,2,mean)
sweep(M[,1],2,mean)
sweep(1:5, 1, mean)
sweep(1:5, 1:5, mean)
sweep(1:5, c(1:5), mean)
sweep(c(1:5), c(1:5), mean)
sweep(M, 2, apply(M,2,mean))
temp <- sweep(M, 2, apply(M,2,mean))
apply(tmep, 2, mean)
temp <- sweep(M, 2, apply(M,2,mean))
apply(tmep, 2, mean)
apply(temp, 2, mean)
Mc - temp
# We can use (Mc-temp) to verify that we're getting the same results
# We'll get a matrix of zero
apply(M,2,max)
maxima <- apply(M, 2, max)
minima <- apply(M, 2, min)
M_scale <- apply(M, 2, FUN = function(X){(X-minima)/(maxima-minima)})
View(M_scale)
M_scale <- apply(M, 2, FUN = function(X){(X-min(X))/(max(X)-min(X))})
View(M_scale)
meanM <- M %>%
apply(2, mean)
MeanM
meanM
meanM <- M %>%
mutate(mean(M))
meanM <- M %>%
mutate(mean())
meanM <- apply(M, 2, mean)
one <- c(1:1)
one <- c(1,length(nrow(M)))
one <- vector(1, length = nrow(M))
one <- vector(TRUE, length = nrow(M))
one <- vector(length = nrow(M))
rep(1,nrow(M))
COV <- (1/ncol(M)-1)*(M-meanM*t(rep(1,ncol(M))))*t(M-meanM*t(rep(1,ncol(M))))
COV <- (1/ncol(M)-1)*(t(M)-rep(1,ncol(M))*t(meanM))*t(t(M)-rep(1,ncol(M))*t(meanM)))
COV <- (1/ncol(M)-1)*(t(M)-rep(1,ncol(M))*t(meanM))*t(t(M)-rep(1,ncol(M))*t(meanM))
meanM <- apply(M, 2, mean)
COV <- (1/ncol(M)-1)*(t(M)-rep(1,ncol(M))*t(meanM))*t(t(M)-rep(1,ncol(M))*t(meanM))
COV <- (1/ncol(M)-1)*(t(M)-rep(1,ncol(M))*meanM)*t(t(M)-rep(1,ncol(M))*meanM)
COV <- (1/ncol(M)-1)*(t(M)-t(rep(1,ncol(M)))*meanM)*t(t(M)-t(rep(1,ncol(M)))*meanM)
meanM
COV <- (1/ncol(M)-1)*(M-t(rep(1,nrow(M)))*meanM)*t(M-t(rep(1,nrow(M)))*meanM)
t(rep(1,nrow(M))
t(rep(1,nrow(M)))
t(rep(1,nrow(M)))
rep(1,nrow(M))
t(meanM) %*% rep(1,nrow(M))
t(meanM)
t(meanM) %*% rep(1,nrow(M))
rep(1,nrow(M))
one <- rep(1,nrow(M))
meanM * t(one)
t(meanM) * (one)
t(meanM) %*% (one)
(meanM) %*% t(one)
COV <- (1/ncol(M)-1)*(t(M) - (meanM) %*% t(one)) %*% t((meanM) %*% t(one))
View(COV)
COV <- (1/ncol(M)-1)*(t(M) - (meanM) %*% t(one)) %*% t(t(M) - (meanM) %*% t(one))
View(COV)
COV <- (1/nrow(M)-1)*(t(M) - (meanM) %*% t(one)) %*% t(t(M) - (meanM) %*% t(one))
View(COV)
COV <- (1/ncol(M)-1)*(t(M) - (meanM) %*% t(one)) %*% t(t(M) - (meanM) %*% t(one))
View(COV)
COV <- (1/ncol(M)*nrow(M)-1)*(t(M) - (meanM) %*% t(one)) %*% t(t(M) - (meanM) %*% t(one))
View(COV)
COV <- (1/(ncol(M)-1))*(t(M) - (meanM) %*% t(one)) %*% t(t(M) - (meanM) %*% t(one))
View(COV)
COV <- (1/(nrow(M)-1))*(t(M) - (meanM) %*% t(one)) %*% t(t(M) - (meanM) %*% t(one))
View(COV)
COV - cov
COV %-% cov
COV
COV - cov(meanM)
cov(meanM)
cov(M)
COV - cov(M)
cor <- matrix(0, nrow = 5, ncol = 5)
cor
for (i in 1:5) {
for (j in 1:5){
cor[i,j] = temp[i,j] / sqrt(temp[i,i]*temp[j,j])
}
}
temp <- COV
cor <- matrix(0, nrow = 5, ncol = 5)
cor
for (i in 1:5) {
for (j in 1:5){
cor[i,j] = temp[i,j] / sqrt(temp[i,i]*temp[j,j])
}
}
cor
dummify <- function(data, all){
if (all == TRUE){
dummy <- matrix(0, nrow = nrow(data), ncol = levels(factor(data)))
}else{
dummy <- matrix(0, nrow = nrow(data), ncol = levels(factor(data)-1))
}
return(dummy)
}
dummify(M)
View(M)
dummify(M$mpg, TRUE)
dummify(M["mpg"], TRUE)
dummify(M[1], TRUE)
dummify(M[2], TRUE)
levels(factor(M[2]))
as.numeric(levels(factor(M[2])))
unique(M[2])
?unique
unique(M[2])
as.numeric(levels(factor(M[,2])))
levels(factor(M[,2]))
dummify <- function(data, all=TRUE){
if (all == TRUE){
dummy <- matrix(0, nrow = nrow(data), ncol = as.numeric(levels(factor(data))))
name <- unique(data)
for (i in 1:nrow(data)){
for (j in 1:nrow(name)){
if (dummy[i,j] == name[j]){
dummy[i,j] = 1
}
}
}
}else{
dummy <- matrix(0, nrow = nrow(data), ncol = as.numeric(levels(factor(data))-1))
name <- unique(data)
name <- name[-nrow(name)]
for (i in 1:nrow(data)){
for (j in 1:nrow(name)){
if (dummy[i,j] == name[j]){
dummy[i,j] = 1
}
}
}
}
return(dummy)
}
dummify(M[2], TRUE)
dummify(M[,2], TRUE)
nrow(M[,2])
count(M[,2])
M[,2]
is.matrix(M[,2])
is.vector(M[,2])
length(M[,2])
dummify <- function(data, all=TRUE){
if (all == TRUE){
dummy <- matrix(0, nrow = length(data), ncol = as.numeric(levels(factor(data))))
name <- unique(data)
for (i in 1:length(data)){
for (j in 1:length(name)){
if (dummy[i,j] == name[j]){
dummy[i,j] = 1
}
}
}
}else{
dummy <- matrix(0, nrow = length(data), ncol = as.numeric(levels(factor(data))-1))
name <- unique(data)
name <- name[-nrow(name)]
for (i in 1:length(data)){
for (j in 1:length(name)){
if (dummy[i,j] == name[j]){
dummy[i,j] = 1
}
}
}
}
return(dummy)
}
dummify(M[,2], TRUE)
dummify <- function(data, all=TRUE){
if (all == TRUE){
dummy <- matrix(0, nrow = length(data), ncol = as.numeric(levels(factor(data))))
name <- unique(data)
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i,j] == name[j]){
dummy[i,j] = 1
}
}
}
}else{
dummy <- matrix(0, nrow = length(data), ncol = as.numeric(levels(factor(data))-1))
name <- unique(data)
name <- name[-nrow(name)]
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i,j] == name[j]){
dummy[i,j] = 1
}
}
}
}
return(dummy)
}
dummify(M[,2], TRUE)
dummify <- function(data, all=TRUE){
if (all == TRUE){
dummy <- matrix(0, nrow = length(data), ncol = as.numeric(levels(factor(data))))
name <- unique(data)
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}else{
dummy <- matrix(0, nrow = length(data), ncol = as.numeric(levels(factor(data))-1))
name <- unique(data)
name <- name[-nrow(name)]
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}
return(dummy)
}
dummify(M[,2], TRUE)
as.numeric(levels(factor(M[,2])))
name <- unique(M[,2])
dummify(M[,2], FALSE)
dummify <- function(data, all=TRUE){
if (all == TRUE){
dummy <- matrix(0, nrow = length(data), ncol = as.numeric(levels(factor(data))))
name <- unique(data)
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}else{
dummy <- matrix(0, nrow = length(data), ncol = as.numeric(levels(factor(data)))-1)
name <- unique(data)
name <- name[-nrow(name)]
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}
return(dummy)
}
dummify(M[,2], FALSE)
dummify <- function(data, all=TRUE){
if (all == TRUE){
dummy <- matrix(0, nrow = length(data), ncol = as.numeric(levels(factor(data))))
name <- unique(data)
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}else{
dummy <- matrix(0, nrow = length(data), ncol = as.numeric(levels(factor(data)))-1)
name <- unique(data)
name <- name[-length(name)]
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}
return(dummy)
}
dummify(M[,2], FALSE)
dummify <- function(data, all=TRUE){
if (all == TRUE){
name <- unique(data)
dummy <- matrix(0, nrow = length(data), ncol = length(name)-1))
dummify <- function(data, all=TRUE){
if (all == TRUE){
name <- unique(data)
dummy <- matrix(0, nrow = length(data), ncol = length(name)-1)
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}else{
name <- unique(data)
name <- name[-length(name)]
dummy <- matrix(0, nrow = length(data), ncol = length(name)-1)
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}
return(dummy)
}
dummify(M[,2], FALSE)
dummify <- function(data, all=TRUE){
if (all == TRUE){
name <- unique(data)
dummy <- matrix(0, nrow = length(data), ncol = length(name))
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}else{
name <- unique(data)
name <- name[-length(name)]
dummy <- matrix(0, nrow = length(data), ncol = length(name)-1)
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}
return(dummy)
}
dummify(M[,2], FALSE)
dummify <- function(data, all=TRUE){
if (all == TRUE){
name <- unique(data)
dummy <- matrix(0, nrow = length(data), ncol = length(name))
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}else{
name <- unique(data)
name <- name[-length(name)]
dummy <- matrix(0, nrow = length(data), ncol = length(name))
for (i in 1:length(data)){
for (j in 1:length(name)){
if (data[i] == name[j]){
dummy[i,j] = 1
}
}
}
}
return(dummy)
}
dummify(M[,2], FALSE)
cyl <- factor(mtcars$cyl)
# all categories
CYL1 <- dummify(cyl, all = TRUE) # minus one category
CYL2 <- dummify(cyl, all = FALSE)
View(CYL1)
crosstable <- function(data1, data2){
return(dummify(data1) %*% dummify(data2))
}
cyl <- factor(mtcars$cyl)
gear <- factor(mtcars$gear)
xtb <- crosstable(cyl, gear)
dummify(cyl)
dummify(gear)
crosstable <- function(data1, data2){
return(dummify(data1) %*% t(dummify(data2)))
}
cyl <- factor(mtcars$cyl)
gear <- factor(mtcars$gear)
xtb <- crosstable(cyl, gear)
View(xtb)
crosstable <- function(data1, data2){
return(t(dummify(data1)) %*% dummify(data2))
}
xtb <- crosstable(cyl, gear)
View(xtb)
