read.csv("USArrests.csv")
pca <- prcomp(USArrests, scale. = TRUE)
names(pca)
View(pca)
View(pca)
arrests <- read.csv("USArrests.csv")
pca <- prcomp(arrests, scale. = TRUE)
pca <- prcomp(USArrests, scale. = TRUE)
USArrests
View(arrests)
temp <- USArrests
View(temp)
arrests <- read.csv("USArrests.csv", col.names = T)
arrests <- read.csv("USArrests.csv", col.names = X)
arrests <- read.csv("USArrests.csv", col.names = "X"")
arrests <- read.csv("USArrests.csv", col.names = "X")
arrests <- read.csv("USArrests.csv", col.names = "X")
?read.csv
arrests <- read.csv("USArrests.csv", col.names = V1)
arrests <- read.csv("USArrests.csv", col.names = "V1")
arrests <- read.csv("USArrests.csv", col.names = "V"1)
arrests <- read.csv("USArrests.csv", col.names = 1)
arrests <- read.csv("USArrests.csv", row.names = 1)
pca <- prcomp(arrests, scale. = TRUE)
names(pca)
pca <- prcomp(USArrests, scale. = TRUE)
names(pca)
?scale
# 1. Use scale() to standardize the USArrests data. Call this object arrests (this will be the matrix X)
arrests <- scale(USArrests, scale = FALSE)
View(arrests)
View(temp)
View(arrests)
pca <- prcomp(USArrests, scale. = TRUE)
names(pca)
# 1. Use scale() to standardize the USArrests data. Call this object arrests (this will be the matrix X)
arrests <- scale(USArrests)
View(arrests)
# 2. Compute the sample correlation matrix R (don’t use cor()). Call this matrix R
R <- t(arrests) %*% arrests / (nrow(arrests) - 1)
cov(arrests)
View(R)
# 3. Use the function eigen() to compute the Eigenvalue Decomposition of R.
eig <- eigen(R)
View(eig)
A <- diag(eig$values, nrow = 4)
View(A)
V <- eig$vectors
View(V)
# 4. Confirm that the matrix of loadings returned by prcomp() is equal to V
pca$rotation - V
# 5. Compute the product Z = XV and check that it’s equal to the principal components returned by prcomp(R)
Z <- arrests %*% V
prcomp(R)$x - Z
prcomp(R)$x
Z
pca$x
Z
Z
pca$x - Z
# 1. Use the function svd() to compute the Singular Value Decomposition of arrests.
svd <- svd(arrests)
View(svd)
# 2. Take the output of svd() to create matrices U, D, V
D <- diag(svd$d, nrow = length(svd$d))
U <- svd$u
V <- svd$v
View(D)
View(U)
View(V)
# 3. Compute the product Z = UD and check that it’s equal to the principal components returned by prcomp()
Z = U %*% D
prcomp(arrests)$x - Z
# 4. Confirm that the matrix of loadings returned by prcomp() is equal to V
# if TRUE, this shall return a zero matrix
prcomp(arrests)$rotation - V
asso <- arrests %*% t(arrests)
View(asso)
# Calculate the eigen-decomposotion of asso
eig2 <- eigen(asso)
eig$values
eig2$values
t(eig2$vectors) %*% arrests
t(eig2$vectors) %*% arrests - pca$x
pca$x
eig2$vectors - eig$vectors
eig2$vectors - U
eig2$values
eig$values
eig2$values/(nrow(eig2) - 1)
eig2$values/(nrow(eig2$values) - 1)
nrow(arrests)
eig2$values/49
eig2$values
A1 <- diag(eig2$values, nrow = nrow(eig2$values))
A1 <- diag(eig2$values, nrow = length(eig2$values))
View(A1)
B <- eig$vectors
A1 %*% B
B %*% A
for (i in 1:nrow(A1)){
for (j in 1:ncol(A1)){
A1[1,j] <- sqrt(A1[i,j])
}
}
View(A1)
asso <- arrests %*% t(arrests)
# Calculate the eigen-decomposotion of asso
eig2 <- eigen(asso)
A1 <- diag(eig2$values, nrow = length(eig2$values))
B <- eig$vectors
View(A1)
for (i in 1:nrow(A1)){
for (j in 1:ncol(A1)){
A1[i,j] <- sqrt(A1[i,j])
}
}
B %*% A1
B <- eig$vectors
B <- eig2$vectors
B %*% A1
(B %*% A1)[,1:4]
(B %*% A1)[,1:4] - pca$x
(B %*% A1)[,1:4]
pca$x
A1 <- diag(eig2$values, nrow = length(eig2$values))
View(A1)
library(tinytex)
unlink('lab 1_cache', recursive = TRUE)
