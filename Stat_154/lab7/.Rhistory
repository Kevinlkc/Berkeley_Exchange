library(ggplot2)
library(tidyverse)
library(tidyr)
library(dplyr)
X <- runif(-2,2,n=100)
f <- function(x){ return(sin(pi*x) +x^2)}
y <- f(X) + rnorm(length(X), sd=.2)
plot(X, y)
X
min(X-0.01)
min(abs(X-0.01))
argmin(abs(X-0.01))
?argmin
??argmin
library(keras)
k_argmin(abs(X-0.01))
library(ggplot2)
library(tidyverse)
library(tidyr)
library(dplyr)
kNNR <- function(z,k){
dis <- X - z
return(y[which.min(dis)])
}
kNNR(1,1)
plot(X, y)
kNNR <- function(z,k){
dis <- abs(X - z)
return(y[which.min(dis)])
}
kNNR(1,1)
which(X < 0)
kNNR <- function(z,k){
dis <- rank(abs(X - z))
f_hat = 0
for (i in 1:k){
f_hat = f_hat + y[which(dis == k)]
}
return(f_hat)
}
kNNR(1,1)
kNNR(1,2)
kNNR(1,1)
kNNR <- function(z,k){
dis <- rank(abs(X - z))
return(mean(y[which(dis<=k)]))
}
kNNR(1,1)
kNNR(1,2)
kNNR(1,3)
kNNR(1,5)
kNNR(1,100)
mean(y)
# A simple implementation of kNN
kNNR <- function(z,k){
return(mean(y[which(rank(abs(X - z))<=k)]))
}
plotX <- seq(-2,2,0.05)
rank(c(1,2,4,3))
rank(c(5,2,4,3))
# A simple implementation of kNN
kNNR <- function(z,k){
return(mean(y[which(rank(abs(X - z))<=k)]))
}
plotX <- seq(-2,2,0.05)
plotY <- kNNR(plotX, 5)
plot(plotX, plotY)
for (i in 1:length(plotX)){
plotY[i] = kNNR(plotX[i],5)
}
plot(plotX, plotY)
Xtest <- runif(-2,2,n=50)
ytest <- f(Xtest) + rnorm(length(Xtest), sd=.2)
MSE <- matrix(nrow = 100, ncol = 2)
MSE <- c()
MSE <- rep(0,100)
for (k in 1:100){
for (i in 1:length(Xtest)){
y_hat = kNNR(Xtest[i], k)
MSE[k] = MSE[k] + (y_hat - ytest)^2
}
}
Xtest <- runif(-2,2,n=50)
ytest <- f(Xtest) + rnorm(length(Xtest), sd=.2)
MSE <- rep(0,100)
for (k in 1:100){
for (i in 1:length(Xtest)){
y_hat = kNNR(Xtest[i], k)
MSE[k] = MSE[k] + (y_hat - ytest[i])^2
}
}
plot(1:100, MSE)
which.min(MSE)
# Comparison to Linear Regression
X <- runif(-2,2,n=100)
f <- function(x){ return(.5*x -1)}
y <- f(X) + rnorm(length(X), sd=.2)
Xtest <- runif(-2,2,n=100)
ytest <- f(Xtest) + rnorm(length(Xtest), sd=.2)
plot(X, y)
# Fit a linear model and calculate the test MSE
model <- lm(y~X)$coef
MSE_lm <- mean(ytest - matrix(c(rep(1,length(Xtest)),Xtest), ncol = 2) %*% model)
MSE_lm <- mean((ytest - matrix(c(rep(1,length(Xtest)),Xtest), ncol = 2) %*% model)^2)
for (k in 1:100){
for (i in 1:length(Xtest)){
y_hat = kNNR(Xtest[i], k)
MSE[k] = MSE[k] + (y_hat - ytest[i])^2
}
}
plot(1:100, MSE)
which.min(MSE)
MSE[5]
library(ggplot2)
library(tidyverse)
library(tidyr)
library(dplyr)
X <- runif(-2,2,n=100)
f <- function(x){return(sin(pi*x) +x^2)}
y <- f(X) + rnorm(length(X), sd=.2)
plot(X, y)
# A simple implementation of kNN
kNNR <- function(z,k){
return(mean(y[which(rank(abs(X - z))<=k)]))
}
# Note that the input is a point and the output is a numerical number
plotX <- seq(-2,2,0.05)
plotY <- c()
for (i in 1:length(plotX)){
plotY[i] = kNNR(plotX[i],5)
}
plot(plotX, plotY)
Xtest <- runif(-2,2,n=50)
ytest <- f(Xtest) + rnorm(length(Xtest), sd=.2)
MSE <- rep(0,100)
for (k in 1:100){
for (i in 1:length(Xtest)){
y_hat = kNNR(Xtest[i], k)
MSE[k] = MSE[k] + (y_hat - ytest[i])^2
}
}
plot(1:100, MSE)
which.min(MSE)
# The minimum is reached when k = 5
# Comparison to Linear Regression
X <- runif(-2,2,n=100)
f <- function(x){ return(.5*x -1)}
y <- f(X) + rnorm(length(X), sd=.2)
Xtest <- runif(-2,2,n=100)
ytest <- f(Xtest) + rnorm(length(Xtest), sd=.2)
plot(X, y)
# Fit a linear model and calculate the test MSE
model <- lm(y~X)$coef
MSE_lm <- mean((ytest - matrix(c(rep(1,length(Xtest)),Xtest), ncol = 2) %*% model)^2)
# Fit a kNNR and calculate the test MSE
MSE_knn <- rep(0,100)
for (k in 1:100){
for (i in 1:length(Xtest)){
y_hat = kNNR(Xtest[i], k)
MSE_knn[k] = MSE_knn[k] + (y_hat - ytest[i])^2
}
}
plot(1:100, MSE_knn)
which.min(MSE_knn)
MSE[which.min(MSE_knn)]
library(ggplot2)
library(tidyverse)
library(tidyr)
library(dplyr)
set.seed(1)
X <- runif(-2,2,n=100)
f <- function(x){return(sin(pi*x) +x^2)}
y <- f(X) + rnorm(length(X), sd=.2)
plot(X, y)
# A simple implementation of kNN
kNNR <- function(z,k){
return(mean(y[which(rank(abs(X - z))<=k)]))
}
# Note that the input is a point and the output is a numerical number
plotX <- seq(-2,2,0.05)
plotY <- c()
for (i in 1:length(plotX)){
plotY[i] = kNNR(plotX[i],5)
}
plot(plotX, plotY)
Xtest <- runif(-2,2,n=50)
ytest <- f(Xtest) + rnorm(length(Xtest), sd=.2)
MSE <- rep(0,100)
for (k in 1:100){
for (i in 1:length(Xtest)){
y_hat = kNNR(Xtest[i], k)
MSE[k] = MSE[k] + (y_hat - ytest[i])^2
}
}
plot(1:100, MSE)
which.min(MSE)
# The minimum is reached when k = 5
# Comparison to Linear Regression
X <- runif(-2,2,n=100)
f <- function(x){ return(.5*x -1)}
y <- f(X) + rnorm(length(X), sd=.2)
Xtest <- runif(-2,2,n=100)
ytest <- f(Xtest) + rnorm(length(Xtest), sd=.2)
plot(X, y)
# Fit a linear model and calculate the test MSE
model <- lm(y~X)$coef
MSE_lm <- mean((ytest - matrix(c(rep(1,length(Xtest)),Xtest), ncol = 2) %*% model)^2)
# Fit a kNNR and calculate the test MSE
MSE_knn <- rep(0,100)
for (k in 1:100){
for (i in 1:length(Xtest)){
y_hat = kNNR(Xtest[i], k)
MSE_knn[k] = MSE_knn[k] + (y_hat - ytest[i])^2
}
}
plot(1:100, MSE_knn)
which.min(MSE_knn)
MSE[which.min(MSE_knn)]
X <- runif(-2,2,n=100)
f <- function(x){ return(.5*x^2 + x -2)}
y <- f(X) + rnorm(length(X), sd=.2)
Xtest <- runif(-2,2,n=100)
ytest <- f(Xtest) + rnorm(length(Xtest), sd=.2)
plot(X, y)
model <- lm(y~X)$coef
MSE_lm <- mean((ytest - matrix(c(rep(1,length(Xtest)),Xtest), ncol = 2) %*% model)^2)
# Fit a kNNR and calculate the test MSE
MSE_knn <- rep(0,100)
for (k in 1:100){
for (i in 1:length(Xtest)){
y_hat = kNNR(Xtest[i], k)
MSE_knn[k] = MSE_knn[k] + (y_hat - ytest[i])^2
}
}
plot(1:100, MSE_knn)
which.min(MSE_knn)
min(MSE_knn)
min(MSE_lm)
set.seed(1)
library(ggplot2)
library(tidyverse)
library(tidyr)
library(dplyr)
set.seed(1)
X <- runif(-2,2,n=100)
f <- function(x){return(sin(pi*x) +x^2)}
y <- f(X) + rnorm(length(X), sd=.2)
plot(X, y)
# A simple implementation of kNN
kNNR <- function(z,k){
return(mean(y[which(rank(abs(X - z))<=k)]))
}
# Note that the input is a point and the output is a numerical number
plotX <- seq(-2,2,0.05)
plotY <- c()
for (i in 1:length(plotX)){
plotY[i] = kNNR(plotX[i],5)
}
plot(plotX, plotY)
Xtest <- runif(-2,2,n=50)
ytest <- f(Xtest) + rnorm(length(Xtest), sd=.2)
MSE <- rep(0,100)
for (k in 1:100){
for (i in 1:length(Xtest)){
y_hat = kNNR(Xtest[i], k)
MSE[k] = MSE[k] + (y_hat - ytest[i])^2
}
}
plot(1:100, MSE)
which.min(MSE)
# The minimum is reached when k = 2
# Comparison to Linear Regression
X <- runif(-2,2,n=100)
f <- function(x){ return(.5*x -1)}
y <- f(X) + rnorm(length(X), sd=.2)
Xtest <- runif(-2,2,n=100)
ytest <- f(Xtest) + rnorm(length(Xtest), sd=.2)
plot(X, y)
# Fit a linear model and calculate the test MSE
model <- lm(y~X)$coef
MSE_lm <- mean((ytest - matrix(c(rep(1,length(Xtest)),Xtest), ncol = 2) %*% model)^2)
# Fit a kNNR and calculate the test MSE
MSE_knn <- rep(0,100)
for (k in 1:100){
for (i in 1:length(Xtest)){
y_hat = kNNR(Xtest[i], k)
MSE_knn[k] = MSE_knn[k] + (y_hat - ytest[i])^2
}
MSE_knn[k] = MSE_knn[k]/length(Xtest)
}
plot(1:100, MSE_knn)
which.min(MSE_knn)
min(MSE_knn)
min(MSE_lm)
X <- runif(-2,2,n=100)
f <- function(x){ return(.5*x^2 + x -2)}
y <- f(X) + rnorm(length(X), sd=.2)
Xtest <- runif(-2,2,n=100)
ytest <- f(Xtest) + rnorm(length(Xtest), sd=.2)
plot(X, y)
model <- lm(y~X)$coef
MSE_lm <- mean((ytest - matrix(c(rep(1,length(Xtest)),Xtest), ncol = 2) %*% model)^2)
# Fit a kNNR and calculate the test MSE
MSE_knn <- rep(0,100)
for (k in 1:100){
for (i in 1:length(Xtest)){
y_hat = kNNR(Xtest[i], k)
MSE_knn[k] = MSE_knn[k] + (y_hat - ytest[i])^2
}
MSE_knn[k] = MSE_knn[k]/length(Xtest)
}
plot(1:100, MSE_knn)
which.min(MSE_knn)
min(MSE_knn)
min(MSE_lm)
