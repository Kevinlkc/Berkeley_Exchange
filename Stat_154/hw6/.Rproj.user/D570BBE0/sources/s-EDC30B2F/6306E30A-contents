---
title: "Assignment3"
author: "Kaicheng Luo"
date: "2019/10/14"
output: 
  pdf_document:
    keep_tex: yes
---

```{r setup, include=FALSE}
library(tidyr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(senstrat)
```

\section*{Problem 2}
```{r}
MP_enumerate = function(i, n.pairs = 15) 
{
 a = 2^((n.pairs-1):0)
 b = 2*a
 2*sapply(i-1, 
          function(x) 
            as.integer((x %% b)>=a)) - 1
}
## Darwin's data from Fisher's book
ytreat     = c(188, 96, 168, 176, 153, 
               172, 177, 163, 146, 173, 
               186, 168, 177, 184, 96)
ycontrol   = c(139, 163, 160, 160, 147, 
               149, 149, 122, 132, 144, 
               130, 144, 102, 124, 144)
difference = ytreat - ycontrol
n.pairs    = length(difference)
abs.diff   = abs(difference)
w.obs = wilcox.test(ytreat, ycontrol, paired = TRUE)$statistic
w.ran      = sapply(1:2^15, 
                    function(x){ 
                      wilcox.test(ytreat*(-MP_enumerate(x)), ycontrol*(MP_enumerate(x)), paired = TRUE)$statistic
                      }, simplify = TRUE)
pvalue     = mean(w.ran>=w.obs)

hist(w.ran, breaks = 50, col = "grey", border = NA,
     xlab = expression(hat(tau)), 
     ylab = "", yaxt = 'n', 
     main = "randomization distribution - Darwin's data")
abline(v = w.obs)
text(30, 400, 
     paste("p-value = ", round(pvalue, 3), sep = ""))
```

```{r}
# Neymanian Inference
tau_hat = mean(ytreat - ycontrol)
V_hat = sum((ytreat - ycontrol - tau_hat)^2) /n.pairs / (n.pairs-1)
print(paste("Confidence Interval = [", tau_hat - 1.96*sqrt(V_hat), ",", tau_hat + 1.96*sqrt(V_hat), "]", sep = ""))
```

```{r}
## Imbens and Rubin book: matched pair data
## television program aimed at improving reading skills for children
dataxy = c(12.9, 12.0, 54.6, 60.6,
           15.1, 12.3, 56.5, 55.5,
           16.8, 17.2, 75.2, 84.8,
           15.8, 18.9, 75.6, 101.9,
           13.9, 15.3, 55.3, 70.6,
           14.5, 16.6, 59.3, 78.4,
           17.0, 16.0, 87.0, 84.2,
           15.8, 20.1, 73.7, 108.6)
           
dataxy = matrix(dataxy, 8, 4,  byrow = TRUE)           

diffx = dataxy[, 2] - dataxy[, 1]
diffy = dataxy[, 4] - dataxy[, 3]

dataxy = cbind(dataxy, diffx, diffy)

rownames(dataxy) = 1:8
colnames(dataxy) = c("x.control", "x.treatment", 
                     "y.control", "y.treatment",
                     "diffx", "diffy")
dataxy
ytreat = dataxy[, 'y.treatment']
ycontrol = dataxy[, 'y.control']
difference = ytreat - ycontrol
n.pairs    = length(difference)
abs.diff   = abs(difference)
t.obs      = mean(difference)
t.ran      = sapply(1:2^8, 
                    function(x){ 
                      sum(MP_enumerate(x, 8)*abs.diff) 
                      })/n.pairs
w.obs = wilcox.test(ytreat, ycontrol, paired = TRUE)$statistic
w.ran      = sapply(1:2^8, 
                    function(x){ 
                      wilcox.test(ytreat*(-MP_enumerate(x, 8)), ycontrol*(MP_enumerate(x, 8)), paired = TRUE)$statistic
                      }, simplify = TRUE)
pvalue     = mean(t.ran>=t.obs)
pvalue
pw = mean(w.ran >= w.obs)
pw
hist(t.ran, breaks = 50, col = "grey", border = NA,
     xlab = expression(hat(tau)), 
     ylab = "", yaxt = 'n', 
     main = "randomization distribution - MPstar data")
abline(v = t.obs)
text(30, 400, 
     paste("p-value = ", round(pvalue, 3), sep = ""))

hist(w.ran, breaks = 50, col = "grey", border = NA,
     xlab = expression(hat(tau)), 
     ylab = "", yaxt = 'n', 
     main = "randomization distribution - MPstar data")
abline(v = w.obs)
text(30, 400, 
     paste("p-value = ", round(pvalue, 3), sep = ""))
```

```{r}
# Regression Adjustment
ycontrol = lm(y.control~x.control, data = data.frame(y.control = dataxy[,'y.control'], x.control = dataxy[,'x.control']))$residuals
ytreat = lm(y.treat~x.treat, data = data.frame(y.treat = dataxy[,'y.treatment'], x.treat = dataxy[,'x.treatment']))$residuals
difference = ytreat - ycontrol
n.pairs    = length(difference)
abs.diff   = abs(difference)
t.obs      = mean(difference)
t.ran      = sapply(1:2^8, 
                    function(x){ 
                      sum(MP_enumerate(x, 8)*abs.diff) 
                      })/n.pairs
w.obs = wilcox.test(ytreat, ycontrol, paired = TRUE)$statistic
w.ran      = sapply(1:2^8, 
                    function(x){ 
                      wilcox.test(ytreat*(-MP_enumerate(x, 8)), ycontrol*(MP_enumerate(x, 8)), paired = TRUE)$statistic
                      }, simplify = TRUE)
pvalue     = mean(t.ran>=t.obs)
pvalue
pw = mean(w.ran >= w.obs)
pw
hist(t.ran, breaks = 50, col = "grey", border = NA,
     xlab = expression(hat(tau)), 
     ylab = "", yaxt = 'n', 
     main = "randomization distribution - MPstar data")
abline(v = t.obs)
text(30, 400, 
     paste("p-value = ", round(pvalue, 3), sep = ""))

hist(w.ran, breaks = 50, col = "grey", border = NA,
     xlab = expression(hat(tau)), 
     ylab = "", yaxt = 'n', 
     main = "randomization distribution - MPstar data")
abline(v = w.obs)
text(30, 400, 
     paste("p-value = ", round(pvalue, 3), sep = ""))
```

\section*{Problem 4}
```{r}
# Stratums that have only treatment / control units
data("homocyst")
temp <- homocyst %>%
  group_by(st) %>%
  filter(z == 1) %>% count()
homocyst <- homocyst %>%
  mutate(yestreat = ifelse(st %in% temp$st, 1, 0))
temp <- homocyst %>%
  group_by(st) %>%
  filter(z == 0) %>% count()
homocyst <- homocyst %>%
  mutate(yescon = ifelse(st %in% temp$st, 1, 0)) %>%
  mutate(yes = yescon + yestreat)
homocyst %>%
  filter(yes != 2) %>%
  arrange(by = st) %>%
  distinct(st)
```

```{r}
# The proportion of the units to be dropped is 5.01%
homocyst %>%
  filter(yes!=2) %>%
  nrow() / nrow(homocyst)
homocyst <- homocyst %>%
  filter(yes==2)
stnum = 1
data <- homocyst %>%
  mutate(stratum = 0) %>%
  arrange(by = st)
for (i in 2:nrow(data)){
  if (data$st[i] == data$st[i-1]){
    data$stratum[i] = stnum
  }else{
    stnum = stnum + 1
    data$stratum[i] = stnum
  }
}
data$stratum[1] = 1
```

```{r, warning=TRUE}
# Stratified RE
stat_SRE <- function(stratum, treatment, y){
  # Assume in our case that the stratum in arranged and indexed.
  # If not, then re-code it to an index.
  number = length(unique(stratum))
  tau = 0
  wil = 0
  r = 0
  # Calculate the three statistics as defined
  for (i in 1:number){
    tempy = y[stratum == i]
    tempt = treatment[stratum == i]
    n = length(tempy)
    pi = n/length(y)
    tau = tau + pi*(mean(tempy[tempt == 1] - mean(tempy[tempt == 0])))
    wil = wil + wilcox.test(tempy[tempt == 1], tempy[tempt == 0])$statistic / (n+1)
    tempy = tempy - mean(tempy)
  }
  y <- rank(y)
  for (i in 1:length(y)){
    if (treatment[i] == 1){
      r = r + y[i]
    }
  }
  return(c(taus = tau, wilcoxon = wil, alignedRank = r))
}
# Here we obtain the obs. values
obsValue <- stat_SRE(data$stratum, data$z, data$homocysteine)
# This is a function for blocked permutation
permute <- function(stratum, treatment){
  ptreat <- vector()
  for (i in 1:length(unique(stratum))){
    ptreat <- c(ptreat, sample(treatment[stratum == i]))
  }
  return(ptreat)
}

MC = 2000
extreme = rep(0,3)
for (i in 1:MC){
  mcStat = stat_SRE(data$stratum, permute(data$stratum, data$z), data$homocysteine)
  for (j in 1:3){
    if (abs(mcStat[j]) > abs(obsValue[j])){
      extreme[j] = extreme[j] + 1
    }
  }
}
# Tidy display of our result
display <- data.frame("Taus" = extreme[1]/MC, "V" = extreme[2]/MC, "Aligned Rank" = extreme[3]/MC)
display
```

```{r}

```

