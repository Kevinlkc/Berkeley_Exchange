"0","lda_predict <- function(fit, newdata)"
"0","{"
"0","  # fit is a list returned by lda_fit, and new data is a m by p matrix of new features"
"0","  sigma = matrix(0, nrow = nrow(newdata), ncol = nrow(fit$mu))"
"0","  posterior = matrix(0, nrow = nrow(newdata), ncol = nrow(fit$mu))"
"0","  for (j in 1:nrow(newdata))"
"0","  {"
"0","    for (i in 1:length(fit$pi))"
"0","    {"
"0","      posterior[j, i] = (fit$pi[i]*dmvnorm(newdata[j, ], mean = fit$mu[i, ], sigma = fit$sigma))"
"0","      sigma[j, i] = log(fit$pi[i]) - 0.5*t(fit$mu[i, ]) %*% solve(fit$sigma) %*% fit$mu[i,] +"
"0","        t(fit$mu[i,]) %*% solve(fit$sigma) %*% t(as.matrix(newdata[j,]))"
"0","    }"
"0","  }"
"0","  # We can either use the largest sigma or the largest posterior"
"0","  class = as.factor(levels(train_set[,5])[apply(sigma, 1, which.max)])"
"0","  posterior / apply(posterior, 1, sum)"
"0","  return(list(""Prediction"" = class, ""Posterior"" = posterior))"
"0","}"
