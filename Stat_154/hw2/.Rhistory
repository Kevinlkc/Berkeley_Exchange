}
View(Gamma)
View(Gamma)
data <- read.csv("Advertising.csv", row.names = "X")
z <- matrix(nrow = nrow(data), ncol = ncol(data))
Gamma <- matrix(nrow = nrow(data), ncol = ncol(data))
Beta <- vector(length = ncol(data))
# Step 1 initialize X[,1] and Z[,1]
temp <- rep(1,nrow(data))
data <- data %>%
add_column(temp, .before = T)
z[,1] = temp
Gamma[1,2] = t(z[,1]) %*% data[,2]
View(Gamma)
for (p in 1:ncol(data)){
browser()
for (j in 2:p+1){
for (l in 1:j-1){
Gamma[l,j] = t(z[,l]) %*% data[,j]
}
z[,j] = data[,j]
for (k in 1:j-1){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
exit()
library(tidyverse)
library(tidyverse)
library(tidyr)
data <- read.csv("Advertising.csv", row.names = "X")
z <- matrix(nrow = nrow(data), ncol = ncol(data))
Gamma <- matrix(nrow = nrow(data), ncol = ncol(data))
Beta <- vector(length = ncol(data))
# Step 1 initialize X[,1] and Z[,1]
temp <- rep(1,nrow(data))
data <- data %>%
add_column(temp, .before = T)
z[,1] = temp
# Step 2 & 3
for (p in 1:ncol(data)){
for (j in 2:p+1){
for (l in 1:j-1){
Gamma[l,j] = t(z[,l]) %*% data[,j]
}
z[,j] = data[,j]
for (k in 1:j-1){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
temp <- c(1,1,1)
3* temp
Gamma[1,2]
Gamma[1,2] = t(z[,1]) %*% data[,2]
Gamma[1,2]
z[,2] - Gamma[1,2]*z[,1]
data[,2] - Gamma[1,2]*z[,1]
# Step 2 & 3
for (p in 1:ncol(data)){
for (j in 2:p+1){
for (l in 1:j-1){
Gamma[l,j] = t(z[,l]) %*% data[,j]
print("Step1")
}
z[,j] = data[,j]
for (k in 1:j-1){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
print("Step2")
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
2:2
# Step 2 & 3
for (p in 1:ncol(data)){
print("Loop1")
for (j in 2:p+1){
print("Loop2")
for (l in 1:j-1){
Gamma[l,j] = t(z[,l]) %*% data[,j]
print("Step1")
}
z[,j] = data[,j]
for (k in 1:j-1){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
print("Step2")
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
# Step 2 & 3
for (p in 1:ncol(data)){
print("Loop1")
for (j in 2:p+1){
print("Loop2")
print(j)
for (l in 1:j-1){
Gamma[l,j] = t(z[,l]) %*% data[,j]
print("Step1")
print(l)
}
z[,j] = data[,j]
for (k in 1:j-1){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
print("Step2")
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
# Step 2 & 3
for (p in 1:ncol(data)){
for (j in 2:(p+1)){
for (l in 1:(j-1)){
Gamma[l,j] = t(z[,l]) %*% data[,j]
print("Step1")
print(l)
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
print("Step2")
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
# Step 2 & 3
for (p in 1:ncol(data)){
for (j in 2:(p+1)){
for (l in 1:(j-1)){
print("Step1")
print(k)
print(l)
Gamma[l,j] = t(z[,l]) %*% data[,j]
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
print("Step2")
print(k)
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
# Step 2 & 3
for (p in 1:ncol(data)){
for (j in 2:(p+1)){
for (l in 1:(j-1)){
print("Step1")
print(j)
print(l)
Gamma[l,j] = t(z[,l]) %*% data[,j]
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
print("Step2")
print(k)
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
View(Gamma)
Gamma <- matrix(nrow = nrow(data), ncol = ncol(data)+1)
# Step 2 & 3
for (p in 1:ncol(data)){
for (j in 2:(p+1)){
for (l in 1:(j-1)){
print("Step1")
print(j)
print(l)
Gamma[l,j] = t(z[,l]) %*% data[,j]
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
print("Step2")
print(k)
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
View(Gamma)
View(z)
View(z)
z <- matrix(nrow = nrow(data), ncol = ncol(data)+1)
# Step 2 & 3
for (p in 1:ncol(data)){
for (j in 2:(p+1)){
for (l in 1:(j-1)){
print("Step1")
print(j)
print(l)
Gamma[l,j] = t(z[,l]) %*% data[,j]
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
print("Step2")
print(k)
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
View(Gamma)
View(Gamma)
View(z)
View(Gamma)
library(tidyverse)
library(tidyr)
data <- read.csv("Advertising.csv", row.names = "X")
z <- matrix(nrow = nrow(data), ncol = ncol(data)+1)
Gamma <- matrix(nrow = nrow(data), ncol = ncol(data)+1)
Beta <- vector(length = ncol(data))
# Step 1 initialize X[,1] and Z[,1]
temp <- rep(1,nrow(data))
data <- data %>%
add_column(temp, .before = T)
z[,1] = temp
# Step 2 & 3
for (p in 1:ncol(data)){
for (j in 2:(p+1)){
for (l in 1:(j-1)){
print("Step1")
print(j)
print(l)
Gamma[l,j] = t(z[,l]) %*% data[,j]
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
print("Step2")
print(k)
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
View(Gamma)
View(z)
data <- read.csv("Advertising.csv", row.names = "X")
z <- matrix(nrow = nrow(data), ncol = ncol(data)+1)
Gamma <- matrix(nrow = nrow(data), ncol = ncol(data)+1)
Beta <- vector(length = ncol(data))
# Step 1 initialize X[,1] and Z[,1]
temp <- rep(1,nrow(data))
data <- data %>%
add_column(temp, .before = T)
z[,1] = temp
# Step 2 & 3
for (p in 1:ncol(data)){
for (j in 2:p){
for (l in 1:(j-1)){
print("Step1")
print(j)
print(l)
Gamma[l,j] = t(z[,l]) %*% data[,j]
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
print("Step2")
print(k)
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
View(z)
View(Gamma)
View(z)
data <- read.csv("Advertising.csv", row.names = "X")
z <- matrix(nrow = nrow(data), ncol = ncol(data)+1)
Gamma <- matrix(nrow = nrow(data), ncol = ncol(data)+1)
Beta <- vector(length = ncol(data))
# Step 1 initialize X[,1] and Z[,1]
temp <- rep(1,nrow(data))
data <- data %>%
add_column(temp, .before = T)
z[,1] = temp
# Step 2 & 3
for (p in 2:ncol(data)){
for (j in 2:p){
for (l in 1:(j-1)){
print("Step1")
print(j)
print(l)
Gamma[l,j] = t(z[,l]) %*% data[,j]
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
print("Step2")
print(k)
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
View(Gamma)
View(z)
Beta
View(data)
result <- lm(sales~. ,data = data)
result$coefficients
View(z)
View(Gamma)
View(z)
# Step 2 & 3
for (p in 2:ncol(data)){
for (j in 2:p){
for (l in 1:(j-1)){
Gamma[l,j] = t(z[,l]) %*% data[,j] / t(z[,l] %*% z[,l])
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
}
}
Beta[p] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
Beta
result$coefficients
Beta
Beta
# Step 2 & 3
for (p in 2:ncol(data)){
for (j in 2:p){
for (l in 1:(j-1)){
Gamma[l,j] = t(z[,l]) %*% data[,j] / t(z[,l] %*% z[,l])
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
}
}
Beta[p-1] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
Beta
Beta <- vector(length = ncol(data)-1)
# Step 2 & 3
for (p in 2:ncol(data)){
for (j in 2:p){
for (l in 1:(j-1)){
Gamma[l,j] = t(z[,l]) %*% data[,j] / t(z[,l] %*% z[,l])
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
}
}
Beta[p-1] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
Beta
Beta <- vector(length = ncol(data)-2)
# Step 2 & 3
for (p in 2:ncol(data)){
for (j in 2:p){
for (l in 1:(j-1)){
Gamma[l,j] = t(z[,l]) %*% data[,j] / t(z[,l] %*% z[,l])
}
z[,j] = data[,j]
for (k in 1:(j-1)){
z[,j] = z[,j] - Gamma[k,j] * z[,k]
}
}
Beta[p-1] = t(z[,p]) %*% data[,'sales'] / (t(z[,p]) %*% z[,p])
}
result$coefficients
Beta
Beta[,-4]
Beta[-4]
library(stargazer)
stargazer(result)
library(ggplot2)
library(ggplot2)
library(tidyverse)
library(tidyr)
library(tidyverse)
library(tidyr)
library(dplyr)
library(FactoMineR)
# Summary Statistics
summary(mtcars)
# Graphs of Distributions
varNames <- c("mpg", "hp", "qsec", "wt")
mtcars %>%
ggplot() + theme_bw() +
geom_histogram(aes(x = mpg))
mtcars %>%
ggplot() + theme_bw() +
geom_histogram(aes(x = mpg))
mtcars %>%
ggplot() + theme_bw() +
geom_histogram(aes(x = hp))
mtcars %>%
ggplot() + theme_bw() +
geom_histogram(aes(x = hp))
mtcars %>%
ggplot() + theme_bw() +
geom_histogram(aes(x = qsec))
mtcars %>%
ggplot() + theme_bw() +
geom_histogram(aes(x = qsec))
mtcars %>%
ggplot() + theme_bw() +
geom_histogram(aes(x = wt))
mtcars %>%
ggplot() + theme_bw() +
geom_histogram(aes(x = qsec))
mtcars %>%
ggplot() + theme_bw() +
geom_histogram(aes(x = wt))
# matrix of correlation of all variables
mtcars <- mtcars %>%
select(mpg, hp, qsec,wt)
mtcars %>%
ggplot() + theme_bw() +
geom_histogram(aes(x = wt))
# matrix of correlation of all variables
mtcars <- mtcars %>%
select(mpg, hp, qsec,wt)
cor(mtcars)
# matrix of correlation of all variables
mtcars <- mtcars %>%
select(mpg, hp, qsec,wt)
cor(mtcars)
# scatterplot matrix
ggpairs(mtcars)
library(GGally)
# scatterplot matrix
ggpairs(mtcars)
# scatterplot matrix
ggpairs(mtcars)
# principal components analysis (of all variables)
pca_result <- PCA(mtcars)
# Note that the first two dimensions (Principal Components) collaboratively
# explains 94.3% of the variation
pca_result$eig
qr_ols <- function(X, y){
# Adding the column of constant
X <- X %>%
add_column(rep(1,nrow(X)), .before = TRUE)
qr_result <- qr(X)
Q <- qr.Q(qr_result)
R <- qr.R(qr_result)
beta <- backsolve(R, (t(Q) %*% y))
return(beta)
}
qr_ols(mtcars[,-1], mtcars[,'mpg'])
My_ols <- function(X, y){
result <- list(X = X)
coefficients <- qr_ols(X,y)
X <- X %>% add_column(rep(1,nrow(X)), .before = TRUE)
fitted_values <- as.matrix(X) %*% matrix(coefficients, ncol = 1)
residuals <- y - fitted_values
RSS <- nrow(X) * var(fitted_values)
sigma2 <- RSS / (nrow(X)-1)
TSS <- nrow(X) * var(y)
ESS <- nrow(X) * var(fitted_values - mean(y))
R2 <- ESS/TSS
result <- list(y = y, X = X, coefficients = coefficients, fitted_values = fitted_values, residuals = residuals, RSS = RSS, sigma2 = sigma2, TSS = TSS, ESS = ESS, R2 = R2)
}
ols_results <- My_ols(mtcars[,-1], mtcars[,'mpg'])
ols_results$coefficients
data(mtcars)
mtcars <- mtcars %>%
select(mpg, hp, qsec, carb)
# result <- lm(mpg ~., data = mtcars)
mean_hp <- mean(mtcars$hp)
mean_qsec <- mean(mtcars$qsec)
mean_carb <- mean(mtcars$carb)
mean_val <- c(mean_hp, mean_qsec, mean_carb)
mtcars$hp <- mtcars$hp - mean(mtcars$hp)
mtcars$qsec <- mtcars$qsec - mean(mtcars$qsec)
mtcars$carb <- mtcars$carb - mean(mtcars$carb)
qr_ols(mtcars[,-1], mtcars[,1])
original_intercept <- qr_ols(mtcars[,-1], mtcars[,1])[1,1]
for (i in 2:4){
original_intercept <- original_intercept - qr_ols(mtcars[,-1], mtcars[,1])[i,1] * mean_val[i-1]
}
original_intercept
data(mtcars)
mtcars <- mtcars %>%
select(mpg, hp, qsec, carb)
# result <- lm(mpg ~., data = mtcars)
mean_hp <- mean(mtcars$hp)
mean_qsec <- mean(mtcars$qsec)
mean_carb <- mean(mtcars$carb)
mean_val <- c(mean_hp, mean_qsec, mean_carb)
mtcars$hp <- mtcars$hp - mean_hp
mtcars$qsec <- mtcars$qsec - mean_qsec
mtcars$carb <- mtcars$carb - mean_carb
qr_ols(mtcars[,-1], mtcars[,1])
library(R.utils)
library(foreign)
library(tidyverse)
library(tidyr)
library(dplyr)
dat <- read.table("cps1re74.csv",header=T)
# unemployed
dat$u74 <- as.numeric(dat$re74==0)
dat$u75 <- as.numeric(dat$re75==0)
## linear regression on the outcome
lmoutcome = lm(re78 ~ ., data = dat)
lmoutcome$coefficients['treat']
lmoutcome = lm(re78 ~ treat, data = dat)
library(Matching)
data(lalonde)
lm(re78~., data = lalonde)$coef
lm(re78~treat:., data = lalonde)$coef
