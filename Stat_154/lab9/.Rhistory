break
}else{count = count+1}
lastcluster = cluster
for (i in 1:nrow(X)){
distance <- rep(0,3)
for (j in 1:k){
distance[j] <- d(X[i,], centroid[j,])
}
cluster[i] = which.min(distance)
}
for (i in 1:k){
centroid[i,] = apply(X[cluster == i,], 2, mean)
}
}
cluster_sizes <- rep(0,k)
for (i in 1:k)
{
cluster_sizes[i] = nrow(X[cluster == i,])
}
wss <- rep(0,k)
for (i in 1:k)
{
SUB <- X[cluster == i,]
for (j in 1:nrow(SUB))
{
wss[i] = wss[i] + sum((SUB[j,] - centroid[i,])^2)
}
}
center <- colMeans(X)
bss = sum((centroid - center)^2)
tss = sum((X - center)^2)
return(list("cluster_sizes" = cluster_sizes,
"cluster_means" = centroid,
"clustering_vector" = cluster,
"wss_cluster" = wss,
"bss_over_tss" = bss / tss))
}
set.seed(1)
result <- my_kmeans(iris[,1:4], 3)$clustering_vector
ggplot() + theme_bw() +
geom_point(aes(x = iris[result == 1, 1], y = iris[result == 1, 2], color = "Group 1")) +
geom_point(aes(x = iris[result == 2, 1], y = iris[result == 2, 2], color = "Group 2")) +
geom_point(aes(x = iris[result == 3, 1], y = iris[result == 3, 2], color = "Group 3"))
result2 <- kmeans(iris[,1:4], 3)$cluster
ggplot() + theme_bw() +
geom_point(aes(x = iris[result2 == 1, 1], y = iris[result2 == 1, 2], color = "Group 1")) +
geom_point(aes(x = iris[result2 == 2, 1], y = iris[result2 == 2, 2], color = "Group 2")) +
geom_point(aes(x = iris[result2 == 3, 1], y = iris[result2 == 3, 2], color = "Group 3"))
result
result2
set.seed(2)
result <- my_kmeans(iris[,1:4], 3)$clustering_vector
ggplot() + theme_bw() +
geom_point(aes(x = iris[result == 1, 1], y = iris[result == 1, 2], color = "Group 1")) +
geom_point(aes(x = iris[result == 2, 1], y = iris[result == 2, 2], color = "Group 2")) +
geom_point(aes(x = iris[result == 3, 1], y = iris[result == 3, 2], color = "Group 3"))
set.seed(1000)
result <- my_kmeans(iris[,1:4], 3)$clustering_vector
ggplot() + theme_bw() +
geom_point(aes(x = iris[result == 1, 1], y = iris[result == 1, 2], color = "Group 1")) +
geom_point(aes(x = iris[result == 2, 1], y = iris[result == 2, 2], color = "Group 2")) +
geom_point(aes(x = iris[result == 3, 1], y = iris[result == 3, 2], color = "Group 3"))
set.seed(1)
temp <- my_kmeans(iris[,1:4], 3)
result <- temp$clustering_vector
ggplot() + theme_bw() +
geom_point(aes(x = iris[result == 1, 1], y = iris[result == 1, 2], color = "Group 1")) +
geom_point(aes(x = iris[result == 2, 1], y = iris[result == 2, 2], color = "Group 2")) +
geom_point(aes(x = iris[result == 3, 1], y = iris[result == 3, 2], color = "Group 3"))
temp2 <- kmeans(iris[,1:4], 3)
result2 <- temp2$cluster
ggplot() + theme_bw() +
geom_point(aes(x = iris[result2 == 1, 1], y = iris[result2 == 1, 2], color = "Group 1")) +
geom_point(aes(x = iris[result2 == 2, 1], y = iris[result2 == 2, 2], color = "Group 2")) +
geom_point(aes(x = iris[result2 == 3, 1], y = iris[result2 == 3, 2], color = "Group 3"))
temp
temp2
(centroid - center)^2
my_kmeans <- function(X, k, d = Euclidean)
{
convergence <- function(x, y){
for (i in 1:length(x)){
if (x[i]!=y[i]){return(FALSE)}
}
return(TRUE)
}
dimension <- ncol(X)
centroid <- matrix(nrow = k, ncol = dimension)
for (i in 1:k){
centroid[i,] <- apply(sample_frac(X, 0.3), 2, mean)
}
cluster <- rep(0, nrow(X))
lastcluster <- rep(1, nrow(X))
count <- 0
while (convergence(cluster, lastcluster) == FALSE)
{
if (count>1000000)
{
print("Do no converge in 1m steps")
break
}else{count = count+1}
lastcluster = cluster
for (i in 1:nrow(X)){
distance <- rep(0,3)
for (j in 1:k){
distance[j] <- d(X[i,], centroid[j,])
}
cluster[i] = which.min(distance)
}
for (i in 1:k){
centroid[i,] = apply(X[cluster == i,], 2, mean)
}
}
cluster_sizes <- rep(0,k)
for (i in 1:k)
{
cluster_sizes[i] = nrow(X[cluster == i,])
}
wss <- rep(0,k)
for (i in 1:k)
{
SUB <- X[cluster == i,]
for (j in 1:nrow(SUB))
{
wss[i] = wss[i] + sum((SUB[j,] - centroid[i,])^2)
}
}
center <- colMeans(X)
bss = cluster_sizes %*% t((centroid - center)^2)
tss = sum((X - center)^2)
return(list("cluster_sizes" = cluster_sizes,
"cluster_means" = centroid,
"clustering_vector" = cluster,
"wss_cluster" = wss,
"bss_over_tss" = bss / tss))
}
set.seed(1)
temp <- my_kmeans(iris[,1:4], 3)
my_kmeans <- function(X, k, d = Euclidean)
{
convergence <- function(x, y){
for (i in 1:length(x)){
if (x[i]!=y[i]){return(FALSE)}
}
return(TRUE)
}
dimension <- ncol(X)
centroid <- matrix(nrow = k, ncol = dimension)
for (i in 1:k){
centroid[i,] <- apply(sample_frac(X, 0.3), 2, mean)
}
cluster <- rep(0, nrow(X))
lastcluster <- rep(1, nrow(X))
count <- 0
while (convergence(cluster, lastcluster) == FALSE)
{
if (count>1000000)
{
print("Do no converge in 1m steps")
break
}else{count = count+1}
lastcluster = cluster
for (i in 1:nrow(X)){
distance <- rep(0,3)
for (j in 1:k){
distance[j] <- d(X[i,], centroid[j,])
}
cluster[i] = which.min(distance)
}
for (i in 1:k){
centroid[i,] = apply(X[cluster == i,], 2, mean)
}
}
cluster_sizes <- rep(0,k)
for (i in 1:k)
{
cluster_sizes[i] = nrow(X[cluster == i,])
}
wss <- rep(0,k)
for (i in 1:k)
{
SUB <- X[cluster == i,]
for (j in 1:nrow(SUB))
{
wss[i] = wss[i] + sum((SUB[j,] - centroid[i,])^2)
}
}
center <- colMeans(X)
bss = t(cluster_sizes) %*% (centroid - center)^2
tss = sum((X - center)^2)
return(list("cluster_sizes" = cluster_sizes,
"cluster_means" = centroid,
"clustering_vector" = cluster,
"wss_cluster" = wss,
"bss_over_tss" = bss / tss))
}
temp <- my_kmeans(iris[,1:4], 3)
temp
my_kmeans <- function(X, k, d = Euclidean)
{
convergence <- function(x, y){
for (i in 1:length(x)){
if (x[i]!=y[i]){return(FALSE)}
}
return(TRUE)
}
dimension <- ncol(X)
centroid <- matrix(nrow = k, ncol = dimension)
for (i in 1:k){
centroid[i,] <- apply(sample_frac(X, 0.3), 2, mean)
}
cluster <- rep(0, nrow(X))
lastcluster <- rep(1, nrow(X))
count <- 0
while (convergence(cluster, lastcluster) == FALSE)
{
if (count>1000000)
{
print("Do no converge in 1m steps")
break
}else{count = count+1}
lastcluster = cluster
for (i in 1:nrow(X)){
distance <- rep(0,3)
for (j in 1:k){
distance[j] <- d(X[i,], centroid[j,])
}
cluster[i] = which.min(distance)
}
for (i in 1:k){
centroid[i,] = apply(X[cluster == i,], 2, mean)
}
}
cluster_sizes <- rep(0,k)
for (i in 1:k)
{
cluster_sizes[i] = nrow(X[cluster == i,])
}
wss <- rep(0,k)
for (i in 1:k)
{
SUB <- X[cluster == i,]
for (j in 1:nrow(SUB))
{
wss[i] = wss[i] + sum((SUB[j,] - centroid[i,])^2)
}
}
center <- colMeans(X)
bss = 0
for (i in 1:k)
{
bss = bss + cluster_sizes[i] * (centroid[i, ] - center)^2
}
tss = sum((X - center)^2)
return(list("cluster_sizes" = cluster_sizes,
"cluster_means" = centroid,
"clustering_vector" = cluster,
"wss_cluster" = wss,
"bss_over_tss" = bss / tss))
}
temp <- my_kmeans(iris[,1:4], 3)
temp
my_kmeans <- function(X, k, d = Euclidean)
{
convergence <- function(x, y){
for (i in 1:length(x)){
if (x[i]!=y[i]){return(FALSE)}
}
return(TRUE)
}
dimension <- ncol(X)
centroid <- matrix(nrow = k, ncol = dimension)
for (i in 1:k){
centroid[i,] <- apply(sample_frac(X, 0.3), 2, mean)
}
cluster <- rep(0, nrow(X))
lastcluster <- rep(1, nrow(X))
count <- 0
while (convergence(cluster, lastcluster) == FALSE)
{
if (count>1000000)
{
print("Do no converge in 1m steps")
break
}else{count = count+1}
lastcluster = cluster
for (i in 1:nrow(X)){
distance <- rep(0,3)
for (j in 1:k){
distance[j] <- d(X[i,], centroid[j,])
}
cluster[i] = which.min(distance)
}
for (i in 1:k){
centroid[i,] = apply(X[cluster == i,], 2, mean)
}
}
cluster_sizes <- rep(0,k)
for (i in 1:k)
{
cluster_sizes[i] = nrow(X[cluster == i,])
}
wss <- rep(0,k)
for (i in 1:k)
{
SUB <- X[cluster == i,]
for (j in 1:nrow(SUB))
{
wss[i] = wss[i] + sum((SUB[j,] - centroid[i,])^2)
}
}
center <- colMeans(X)
bss = 0
for (i in 1:k)
{
bss = bss + cluster_sizes[i] * sum((centroid[i, ] - center)^2)
}
tss = sum((X - center)^2)
return(list("cluster_sizes" = cluster_sizes,
"cluster_means" = centroid,
"clustering_vector" = cluster,
"wss_cluster" = wss,
"bss_over_tss" = bss / tss))
}
temp <- my_kmeans(iris[,1:4], 3)
temp
my_kmeans <- function(X, k, d = Euclidean)
{
convergence <- function(x, y){
for (i in 1:length(x)){
if (x[i]!=y[i]){return(FALSE)}
}
return(TRUE)
}
dimension <- ncol(X)
centroid <- matrix(nrow = k, ncol = dimension)
for (i in 1:k){
centroid[i,] <- apply(sample_frac(X, 0.3), 2, mean)
}
cluster <- rep(0, nrow(X))
lastcluster <- rep(1, nrow(X))
count <- 0
while (convergence(cluster, lastcluster) == FALSE)
{
if (count>1000000)
{
print("Do no converge in 1m steps")
break
}else{count = count+1}
lastcluster = cluster
for (i in 1:nrow(X)){
distance <- rep(0,3)
for (j in 1:k){
distance[j] <- d(X[i,], centroid[j,])
}
cluster[i] = which.min(distance)
}
for (i in 1:k){
centroid[i,] = apply(X[cluster == i,], 2, mean)
}
}
cluster_sizes <- rep(0,k)
for (i in 1:k)
{
cluster_sizes[i] = nrow(X[cluster == i,])
}
wss <- rep(0,k)
for (i in 1:k)
{
SUB <- X[cluster == i,]
for (j in 1:nrow(SUB))
{
wss[i] = wss[i] + sum((SUB[j,] - centroid[i,])^2)
}
}
center <- colMeans(X)
bss = 0
for (i in 1:k)
{
bss = bss + cluster_sizes[i] * sum((centroid[i, ] - center)^2)
}
tss = 0
for (i in 1:nrow(X))
{
tss = tss + (X[i,] - center)^2
}
return(list("cluster_sizes" = cluster_sizes,
"cluster_means" = centroid,
"clustering_vector" = cluster,
"wss_cluster" = wss,
"bss_over_tss" = bss / tss))
}
temp <- my_kmeans(iris[,1:4], 3)
temp
temp <- my_kmeans(iris[,1:4], 3)
temp
my_kmeans <- function(X, k, d = Euclidean)
{
convergence <- function(x, y){
for (i in 1:length(x)){
if (x[i]!=y[i]){return(FALSE)}
}
return(TRUE)
}
dimension <- ncol(X)
centroid <- matrix(nrow = k, ncol = dimension)
for (i in 1:k){
centroid[i,] <- apply(sample_frac(X, 0.3), 2, mean)
}
cluster <- rep(0, nrow(X))
lastcluster <- rep(1, nrow(X))
count <- 0
while (convergence(cluster, lastcluster) == FALSE)
{
if (count>1000000)
{
print("Do no converge in 1m steps")
break
}else{count = count+1}
lastcluster = cluster
for (i in 1:nrow(X)){
distance <- rep(0,3)
for (j in 1:k){
distance[j] <- d(X[i,], centroid[j,])
}
cluster[i] = which.min(distance)
}
for (i in 1:k){
centroid[i,] = apply(X[cluster == i,], 2, mean)
}
}
cluster_sizes <- rep(0,k)
for (i in 1:k)
{
cluster_sizes[i] = nrow(X[cluster == i,])
}
wss <- rep(0,k)
for (i in 1:k)
{
SUB <- X[cluster == i,]
for (j in 1:nrow(SUB))
{
wss[i] = wss[i] + sum((SUB[j,] - centroid[i,])^2)
}
}
center <- colMeans(X)
bss = 0
for (i in 1:k)
{
bss = bss + cluster_sizes[i] * sum((centroid[i, ] - center)^2)
}
tss = 0
for (i in 1:nrow(X))
{
tss = tss + sum((X[i,] - center)^2)
}
return(list("cluster_sizes" = cluster_sizes,
"cluster_means" = centroid,
"clustering_vector" = cluster,
"wss_cluster" = wss,
"bss_over_tss" = bss / tss))
}
result <- temp$clustering_vector
temp <- my_kmeans(iris[,1:4], 3)
temp
temp2
temp
# If we use the Manhattan Distance
result <- my_kmeans(iris[,1:4], 3, Manhattan)$clustering_vector
ggplot() + theme_bw() +
geom_point(aes(x = iris[result == 1, 1], y = iris[result == 1, 2], color = "Group 1")) +
geom_point(aes(x = iris[result == 2, 1], y = iris[result == 2, 2], color = "Group 2")) +
geom_point(aes(x = iris[result == 3, 1], y = iris[result == 3, 2], color = "Group 3"))
# If we use the Manhattan Distance
set.seed(1000)
result <- my_kmeans(iris[,1:4], 3, Manhattan)$clustering_vector
result <- my_kmeans(iris[,1:4], 3, Manhattan)$clustering_vector
ggplot() + theme_bw() +
geom_point(aes(x = iris[result == 1, 1], y = iris[result == 1, 2], color = "Group 1")) +
geom_point(aes(x = iris[result == 2, 1], y = iris[result == 2, 2], color = "Group 2")) +
geom_point(aes(x = iris[result == 3, 1], y = iris[result == 3, 2], color = "Group 3"))
# Heirarchical Clustering
hc.complete <-hclust(dist(iris[, 1:4]), method="single")
plot(hc.complete, main="Complete Linkage ", xlab="", sub="",cex=.9)
# Heirarchical Clustering
hc.complete <-hclust(dist(iris[, 1:4]), method="complete")
plot(hc.complete, main="Complete Linkage ", xlab="", sub="",cex=.9)
hc.single <-hclust(dist(iris[, 1:4]), method="single")
plot(hc.single, main="Single Linkage ", xlab="", sub="",cex=.9)
hc.average <-hclust(dist(iris[, 1:4]), method="average")
plot(hc.average, main="Average Linkage ", xlab="", sub="",cex=.9)
cutree(hc.complete, k = 3)
ggplot() + theme_bw() +
geom_point(aes(x = iris[result == 1, 1], y = iris[result == 1, 2], color = "Group 1")) +
geom_point(aes(x = iris[result == 2, 1], y = iris[result == 2, 2], color = "Group 2")) +
geom_point(aes(x = iris[result == 3, 1], y = iris[result == 3, 2], color = "Group 3"))
x <- c(1,2,3)
y <- c(2,4,5)
V <- matrix(c(1,2,4,5,4,7,6,5,4), nrow = 3)
x %*% t(y)
x %*% V %*% t(y %*% V)
x <- c(1,2,3)
y <- c(2,4,5)
V <- matrix(c(1,2,4,5,4,7,6,5,4), nrow = 3)
t(x) %*% y
x %*% V %*% t(y %*% V)
t(x) %*% y /(x %*% V %*% t(y %*% V))
x <- c(1,2,3)
x <- c(2,3,4)
y <- c(2,4,5)
V <- matrix(c(1,2,4,5,4,7,6,5,4), nrow = 3)
t(x) %*% y /(x %*% V %*% t(y %*% V))
